$EENUM GN-Local, GN-Entry;

CutName {
  e.Prefix 'E_' e.Name = e.Name;
  e.Name = e.Name;
}

SwGenFnStart {
  s.MemoryClass e.Name =
    ('public class ' e.Name ': RefalRTS.Function')
    ('{')
    ('  private ' e.Name '() { }')
    ('  public override string func_name ()')
    ('  {')
    ('    return "' <CutName e.Name> '";')
    ('  }')
    ()
    ('  public static readonly RefalRTS.Function instance = new ' e.Name '();')
    ()
    ('  public override RefalRTS.FnResult perform(UInt64 arg_begin, UInt64 arg_end)')
    ('  {')
    ('    RefalRTS.this_is_a_generated_function();');
}

$ENTRY GenFnStart {
  s.MemoryClass e.Name =
    <SwGenFnStart s.MemoryClass e.Name>;
}

$ENTRY GenFnEnd {
  =
    ('    return RefalRTS.FnResult.RecognitionImpossible;')
    ('  }')
    ('}')
    ();
}

$ENTRY GenFnEnd-Success {
  =
    ('    //return RefalRTS.FnResult.RecognitionImpossible;')
    ('  }')
    ('}')
    ();
}

$ENTRY GenEEnum {
  e.Name = <SwGenFnStart GN-Entry e.Name> <GenFnEnd>;
}

$ENTRY GenEnum {
  e.Name = <SwGenFnStart GN-Local e.Name> <GenFnEnd>;
}

$ENTRY GenExtern {
  e.Name =
    //('extern RefalRTS.FnResult ' e.Name '(' <FuncArguments> ');') ()
    ;
}

$ENTRY GenForward {
  e.Name =
    //('static RefalRTS.FnResult ' e.Name '(' <FuncArguments> ');') ()
    ;
}

$FORWARD GenSwap-Aux;

$ENTRY GenESwap {
  e.Name =
    ('//$ESWAP ' e.Name)
    <GenSwap-Aux GN-Entry e.Name>;
}

$ENTRY GenSwap {
  e.Name =
    ('//$SWAP ' e.Name)
    <GenSwap-Aux GN-Local e.Name>;
}

GenSwap-Aux {
  s.MemoryClass e.Name =
    ('public class ' e.Name ': RefalRTS.Swap')
    ('{')
    ('  private ' e.Name '() { }')
    ('  public override string func_name ()')
    ('  {')
    ('    return "' e.Name '";')
    ('  }')
    ()
    ('  public static readonly RefalRTS.Function instance = new ' e.Name '();')
    ('}')
    ();
}

$ENTRY GenIdent {
  e.Prefix 'E_' e.Name =
    ('class ' e.Prefix 'E_' e.Name ' {')
    ('  public static readonly RefalRTS.Function instance =')
    ('    RefalRTS.alloc_ident("' e.Name '");')
    ('}')
    ();
}

$ENTRY GenCommonHeaders {
  = ('// Automatically generated file. Don\'t edit!')
  ('using System;')
  () ();
}

$ENTRY GenCommonTailer {
  = () ('//End of file');
}

// Команды и их подтипы
//FROM Algorithm
$EXTERN CmdChar, CmdNumber, CmdName, CmdIdent,
  CmdBrackets, CmdADT, CmdEmpty,
  CmdRepeated, CmdVar, CmdOpenedE, CmdClosedE,
  CmdAllocateElem, CmdLinkBrackets, CmdPushStack,
  CmdInsertElem, CmdInsertEVar, CmdCheckEVar,
  ElChar, ElName, ElNumber, ElIdent,
  ElOpenADT, ElCloseADT,
  ElOpenBracket, ElCloseBracket,
  ElOpenCall, ElCloseCall,
  ElElem, ElSTVar,
  CmdEmptyResult, CmdReturnResult,
  CmdIfDef, CmdElse, CmdEndIf,
  CmdInitRAA, CmdFinRAA,
  CmdDeclareEVar, CmdDeclareVar,
  CmdCopyEVar, CmdCopyVar,
  AlgLeft, AlgRight,
  CmdComment, CmdPrint,
  CmdArrChar, CmdArrInt, CmdArrFunc, CmdArrIdent,
  CmdArrOB, CmdArrCB, CmdArrOADT, CmdArrCADT,
  CmdArrOC, CmdArrCC, CmdArrSplice, CmdArrCopy;

$FORWARD GenSentence-Aux, GenCommand, BracketsVar-B, BracketsVar-E;

//FROM LibraryEx
$EXTERN Map, MapReduce, Inc;

//FROM Library
$EXTERN StrFromInt, WriteLine;

$ENTRY GenSentence {
  e.Algorithm =
    ('    for( ; ; ) {')
    ('      UInt64 ' <BracketsVar-B 0 0> ' = arg_begin;')
    ('      UInt64 ' <BracketsVar-E 0 0> ' = arg_end;')
    ('      RefalRTS.move_left( ref ' <BracketsVar-B 0 0> ', ref ' <BracketsVar-E 0 0> ' );')
    ('      RefalRTS.move_left( ref ' <BracketsVar-B 0 0> ', ref ' <BracketsVar-E 0 0> ' );')
    ('      RefalRTS.move_right( ref ' <BracketsVar-B 0 0> ', ref ' <BracketsVar-E 0 0> ' );')
    <GenSentence-Aux
      <MapReduce
        GenCommand
        ('      ' /* indent */)
        e.Algorithm
      >
    >;
}

$FORWARD GenCloseBrackets;

GenSentence-Aux {
  (e.Indent) e.Generated =
    e.Generated <GenCloseBrackets e.Indent> ();
}

BracketsVar-B {
  s.BracketNum s.Nested =
    'bb_' <StrFromInt s.BracketNum> '_' <StrFromInt s.Nested>;
}

BracketsVar-E {
  s.BracketNum s.Nested =
    'be_' <StrFromInt s.BracketNum> '_' <StrFromInt s.Nested>;
}

BracketsVar-OE {
  s.BracketNum s.Nested =
    'boe_' <StrFromInt s.BracketNum> '_' <StrFromInt s.Nested>;
}

/*
  Величина отступа также определяет режим работы. Отступ в 4 пробела --
  вне цикла по открытой e-переменной, отступ больше -- внутри оного цикла.
*/

$FORWARD PrintVar, PrintEVar-B, PrintEVar-E, PrintEVar-OE,
  PrintArrVar, PrintArrEVar-B, PrintArrEVar-E,
  PrintMatchChar, PrintMatchNumber, PrintMatchName,
  PrintMatchIdent,
  PrintMatchADT,
  PrintMatchBrackets,
  PrintMatchEmpty,
  PrintMatchSTVar, PrintMatchRepeated,
  PrintAllocateElem, PrintElemVar;

$FORWARD StringFromCommand, Escape;

//FROM LibraryEx
$EXTERN Dec;

PrintStkBracket {
  e.Indent (s.StkBracket s.Nested) =
    (e.Indent
      'UInt64 '
      <BracketsVar-B s.StkBracket <Inc s.Nested>> ' = '
      <BracketsVar-B s.StkBracket s.Nested> ';'
    )
    (e.Indent
      'UInt64 '
      <BracketsVar-E s.StkBracket <Inc s.Nested>> ' = '
      <BracketsVar-E s.StkBracket s.Nested> ';'
    );
}



$LABEL CCreateClosure;

PrintName {
  # CCreateClosure = 'RefalRTS.create_closure';

  e.Name = e.Name;
}

GenCommand {
  (e.Indent) (CmdComment e.Text) = (e.Indent) (e.Indent '//' e.Text);
  (e.Indent) (CmdPrint e.Text) = (e.Indent) (e.Indent e.Text);

  (e.Indent) (CmdDeclareEVar e.VarInfo) =
    (e.Indent)
    (e.Indent 'UInt64 ' <PrintEVar-B e.VarInfo> ' = UInt64.MaxValue;')
    (e.Indent 'UInt64 ' <PrintEVar-E e.VarInfo> ' = UInt64.MaxValue;');

  (e.Indent) (CmdDeclareVar e.VarInfo) =
    (e.Indent)
    (e.Indent 'UInt64 ' <PrintVar e.VarInfo> ' = UInt64.MaxValue;');

  (e.Indent) (CmdChar s.Direction s.BracketNum s.Nested s.Char) =
    (e.Indent)
    <PrintMatchChar (e.Indent) s.Direction s.BracketNum s.Nested s.Char>;

  (e.Indent) (CmdNumber s.Direction s.BracketNum s.Nested s.Number) =
    (e.Indent)
    <PrintMatchNumber (e.Indent) s.Direction s.BracketNum s.Nested s.Number>;

  (e.Indent) (CmdName s.Direction s.BracketNum s.Nested e.Name) =
    (e.Indent)
    <PrintMatchName (e.Indent) s.Direction s.BracketNum s.Nested e.Name>;

  (e.Indent) (CmdIdent s.Direction s.BracketNum s.Nested e.Name) =
    (e.Indent)
    <PrintMatchIdent (e.Indent) s.Direction s.BracketNum s.Nested e.Name>;

  (e.Indent) (CmdBrackets s.Direction s.BracketNum s.Nested s.InnerBrackets) =
    (e.Indent)
    (e.Indent 'UInt64 ' <BracketsVar-B s.InnerBrackets 0> ' = 0;')
    (e.Indent 'UInt64 ' <BracketsVar-E s.InnerBrackets 0> ' = 0;')
    <PrintMatchBrackets
      (e.Indent) s.Direction s.BracketNum s.Nested s.InnerBrackets
    >;

  (e.Indent) (CmdADT s.Direction s.BracketNum s.Nested s.InnerBrackets e.Name) =
    (e.Indent)
    (e.Indent 'UInt64 ' <BracketsVar-B s.InnerBrackets 0> ' = 0;')
    (e.Indent 'UInt64 ' <BracketsVar-E s.InnerBrackets 0> ' = 0;')
    <PrintMatchADT
      (e.Indent) s.Direction s.BracketNum s.Nested s.InnerBrackets e.Name
    >;

  (e.Indent) (CmdEmpty s.BracketNum s.Nested) =
    (e.Indent)
    <PrintMatchEmpty (e.Indent) s.BracketNum s.Nested>;

  (e.Indent) (CmdVar s.Direction s.BracketNum s.Nested s.Mode e.Info) =
    (e.Indent)
    <PrintMatchSTVar (e.Indent) s.Direction s.BracketNum s.Nested s.Mode e.Info>;

  (e.Indent) (CmdRepeated s.Direction s.BracketNum s.Nested e.VarInfo) =
    (e.Indent)
    <PrintMatchRepeated (e.Indent) s.Direction s.BracketNum s.Nested e.VarInfo>;

  (e.Indent) (CmdClosedE AlgLeft s.BracketNum s.Nested 'e' e.Index) =
    (e.Indent)
    (e.Indent
      <PrintEVar-B 1 'e' e.Index> ' = ' <BracketsVar-B s.BracketNum s.Nested> ';'
    )
    (e.Indent 'RefalRTS.use( ref ' <PrintEVar-B 1 'e' e.Index> ' );')
    (e.Indent
      <PrintEVar-E 1 'e' e.Index> ' = ' <BracketsVar-E s.BracketNum s.Nested> ';'
    )
    (e.Indent 'RefalRTS.use( ref ' <PrintEVar-E 1 'e' e.Index> ' );');

  (e.Indent)
  (CmdOpenedE AlgLeft s.BracketNum s.Nested 'e' e.Index (e.BracketsForSave)) =
    (e.Indent '  ')
    (e.Indent 'for(')
    (e.Indent
      '  UInt64 ' <BracketsVar-OE s.BracketNum s.Nested>
      ' = ' <BracketsVar-B s.BracketNum s.Nested> ';'
    )
    (e.Indent '  '
      '! RefalRTS.is_empty( ' <BracketsVar-OE s.BracketNum s.Nested> ', '
      <BracketsVar-E s.BracketNum s.Nested> ' );'
    )
    (e.Indent '  '
      'RefalRTS.next_term( ref ' <BracketsVar-OE s.BracketNum s.Nested> ', ref '
      <BracketsVar-E s.BracketNum s.Nested> ' )'
    )
    (e.Indent ') {')
    /*
      Объявление и инициализация "внутренних" переменных для цикла.
      Эти переменные (с индексом вложенности на единицу бОльшим) используются
      внутри цикла как границы распознавания подвыражений.
      Поскольку при неудачном сопоставлении в рамках заданной итерации нужно
      попробовать следующий вариант сопоставления, т.е. необходимо
      восстановить предыдущее до сопоставления, мы создаём копию состояния,
      с которой и работаем в рамках итерации.
    */
    <Map
      (PrintStkBracket e.Indent '  ')
      e.BracketsForSave
    >
    (e.Indent '  '
      <BracketsVar-B s.BracketNum <Inc s.Nested>>
      ' = ' <BracketsVar-OE s.BracketNum s.Nested> ';'
    )
    (e.Indent '  '
      <PrintEVar-B 1 'e' e.Index> ' = '
      <BracketsVar-B s.BracketNum s.Nested> ';'
    )
    (e.Indent '  '
      <PrintEVar-E 1 'e' e.Index> ' = '
      <BracketsVar-OE s.BracketNum s.Nested> ';'
    )
    (e.Indent
      '  RefalRTS.move_right( ref ' <PrintEVar-B 1 'e' e.Index> ', ref '
      <PrintEVar-E 1 'e' e.Index> ' );'
    );

  (e.Indent) (CmdEmptyResult) =
    (e.Indent)
    ()
    (e.Indent 'RefalRTS.reset_allocator();')
    (e.Indent 'UInt64 res = arg_begin;');

  (e.Indent) (CmdCopyEVar s.Usings 'e' e.Index) =
    (e.Indent)
    (e.Indent
      'if( ! RefalRTS.copy_evar( '
      'ref ' <PrintEVar-B s.Usings 'e' e.Index> ', '
      'ref ' <PrintEVar-E s.Usings 'e' e.Index> ', '
      <PrintEVar-B <Dec s.Usings> 'e' e.Index> ', '
      <PrintEVar-E <Dec s.Usings> 'e' e.Index>
      ' ) )'
    )
    (e.Indent '  return RefalRTS.FnResult.NoMemory;');

  (e.Indent) (CmdCopyVar s.Usings s.Mode e.Index) =
    (e.Indent)
    (e.Indent
      'if( ! RefalRTS.copy_stvar( '
      'ref ' <PrintVar s.Usings s.Mode e.Index> ', '
      <PrintVar <Dec s.Usings> s.Mode e.Index> ' ) )'
    )
    (e.Indent '  return RefalRTS.FnResult.NoMemory;');

  (e.Indent) (CmdAllocateElem s.ElemNumber e.ElemInfo) =
    (e.Indent)
    (e.Indent 'UInt64 ' <PrintElemVar s.ElemNumber> ' = UInt64.MaxValue;')
    <PrintAllocateElem (e.Indent) s.ElemNumber e.ElemInfo>;

  (e.Indent) (CmdLinkBrackets s.Left s.Right) =
    (e.Indent)
    (e.Indent
      'RefalRTS.link_brackets( '
      <PrintElemVar s.Left> ', ' <PrintElemVar s.Right>
      ' );'
    );

  (e.Indent) (CmdPushStack s.ElemNumber) =
    (e.Indent)
    (e.Indent 'RefalRTS.push_stack( ' <PrintElemVar s.ElemNumber> ' );');

  (e.Indent) (CmdInsertElem ElElem s.ElemNumber) =
    (e.Indent)
    (e.Indent
      'res = RefalRTS.splice_elem( res, ' <PrintElemVar s.ElemNumber> ' );'
    );

  (e.Indent) (CmdInsertElem ElSTVar s.Usings s.Mode e.Index) =
    (e.Indent)
    (e.Indent
      'res = RefalRTS.splice_stvar( res, '
      <PrintVar s.Usings s.Mode e.Index> ' );'
    );

  (e.Indent) (CmdInsertEVar s.Usings 'e' e.Index) =
    (e.Indent)
    (e.Indent
      'res = RefalRTS.splice_evar( res, '
      <PrintEVar-B s.Usings 'e' e.Index> ', '
      <PrintEVar-E s.Usings 'e' e.Index> ' );'
    );

  (e.Indent) (CmdCheckEVar s.Usings 'e' e.Index) =
    (e.Indent)
    (e.Indent
      'RefalRTS.check_evar( '
      'ref ' <PrintEVar-B s.Usings 'e' e.Index> ', '
      'ref ' <PrintEVar-E s.Usings 'e' e.Index> ' );'
    );

  (e.Indent) (CmdReturnResult) =
    (e.Indent)
    (e.Indent 'RefalRTS.use( ref res );')
    (e.Indent 'RefalRTS.garbage( arg_begin, arg_end );')
    (e.Indent 'return RefalRTS.FnResult.Success;');

}

PrintVar {
  s.Usings s.Mode e.Index =
    s.Mode e.Index '_' <StrFromInt s.Usings>;
}

PrintEVar-B {
  s.Usings s.Mode e.Index =
    s.Mode e.Index '_b_' <StrFromInt s.Usings>;
}

PrintEVar-E {
  s.Usings s.Mode e.Index =
    s.Mode e.Index '_e_' <StrFromInt s.Usings>;
}


$FORWARD PrintMatch;

Escape {
  '\n' = '\\n';
  '\t' = '\\t';
  '\r' = '\\r';
  '\\' = '\\\\';
  '' = '\\' '';
  s.Other = s.Other;
}

PrintMatchChar {
  (e.Indent) s.Direction s.BracketNum s.Nested s.Char =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('char') '\'' <Escape s.Char> '\''
    >;
}

PrintMatchNumber {
  (e.Indent) s.Direction s.BracketNum s.Nested s.Number =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('number') <StrFromInt s.Number> 'UL'
    >;
}

PrintMatchName {
  (e.Indent) s.Direction s.BracketNum s.Nested e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('function') e.Name '.instance'
    >;
}

PrintMatchIdent {
  (e.Indent) s.Direction s.BracketNum s.Nested e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('ident') e.Name '.instance'
    >;
}

PrintMatchBrackets {
  (e.Indent) s.Direction s.BracketNum s.Nested s.InnerNum =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('brackets')
      'ref ' <BracketsVar-B s.InnerNum 0> ', ref ' <BracketsVar-E s.InnerNum 0>
    >;
}

PrintMatchADT {
  (e.Indent) s.Direction s.BracketNum s.Nested s.InnerNum e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('adt')
      'ref ' <BracketsVar-B s.InnerNum 0> ', '
      'ref ' <BracketsVar-E s.InnerNum 0> ', '
      e.Name '.instance'
    >;
}

BreakerFromIndent {
  '      ' = 'break;';

  e.OtherIndent = 'continue;';
}

PrintMatchEmpty {
  (e.Indent) s.BracketNum s.Nested =
    (e.Indent
      'if( ! RefalRTS.is_empty( ' <BracketsVar-B s.BracketNum s.Nested> ', '
      <BracketsVar-E s.BracketNum s.Nested> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

StrFromDirection {
  AlgLeft = 'left'; AlgRight = 'right';
}

VarMatchFunction { 's' = 'svar'; 't' = 'tvar'; }

PrintMatchSTVar {
  (e.Indent) s.Direction s.BracketNum s.Nested s.Mode e.Index =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      (<VarMatchFunction s.Mode>) 'ref ' <PrintVar 1 s.Mode e.Index>
    >;
}

PrintMatchRepeated {
  (e.Indent) s.Direction s.BracketNum s.Nested s.Usings 'e' e.Index =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('repeated_evar')
      'ref ' <PrintEVar-B s.Usings 'e' e.Index> ', '
      'ref ' <PrintEVar-E s.Usings 'e' e.Index> ', '
      <PrintEVar-B <Dec s.Usings> 'e' e.Index> ', '
      <PrintEVar-E <Dec s.Usings> 'e' e.Index>
    >;

  (e.Indent) s.Direction s.BracketNum s.Nested s.Usings s.Mode e.Index =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('repeated_stvar')
      'ref ' <PrintVar s.Usings s.Mode e.Index> ', '
      <PrintVar <Dec s.Usings> s.Mode e.Index>
    >;
}

PrintMatch {
  (e.Indent) s.Direction s.BracketNum s.Nested (e.Function) e.TextRep =
    (e.Indent
      'if( ! RefalRTS.' e.Function '_' <StrFromDirection s.Direction>
      '( ' e.TextRep ', ref ' <BracketsVar-B s.BracketNum s.Nested> ', ref '
      <BracketsVar-E s.BracketNum s.Nested> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

PrintElemVar {
  s.Number = 'n' <StrFromInt s.Number>;
}

$FORWARD PrintAllocate-Aux, SwAllocator, SwInfo;

PrintAllocateElem {
  (e.Indent) s.ElemNumber s.ElementType e.Info =
    <PrintAllocate-Aux
      (e.Indent) s.ElemNumber
      ( <SwAllocator s.ElementType> )
      ( <SwInfo s.ElementType e.Info> )
    >
    (e.Indent '  return RefalRTS.FnResult.NoMemory;');
}

PrintAllocate-Aux {
  (e.Indent) s.ElemNumber (e.Constructor) (e.Value) =
    (e.Indent
      'if( ! RefalRTS.' e.Constructor '( ref ' <PrintElemVar s.ElemNumber>
      e.Value ' ) )'
    );
}

SwAllocator {
  ElChar = 'alloc_char';
  ElName = 'alloc_function';
  ElNumber = 'alloc_number';
  ElIdent = 'alloc_ident';

  ElOpenADT = 'alloc_open_adt';
  ElCloseADT = 'alloc_close_adt';

  ElOpenBracket = 'alloc_open_bracket';
  ElCloseBracket = 'alloc_close_bracket';

  ElOpenCall = 'alloc_open_call';
  ElCloseCall = 'alloc_close_call';
}

SwInfo {
  ElChar s.Char = ', ' '' <Escape s.Char> '';

  ElName e.Name = ', ' <PrintName e.Name> '.instance';

  ElNumber s.Number = ', ' <StrFromInt s.Number> 'UL';

  ElIdent e.Name = ', ' e.Name '.instance';

  // Остальное -- скобки
  s.Other = ;
}

GenCloseBrackets {
  '      ' = ('    }');

  '        ' '  ' e.Indent =
    (e.Indent '        }')
    (e.Indent '        continue;')
    <GenCloseBrackets '        ' e.Indent>;

  '  ' e.Indent =
    (e.Indent '}')
    (e.Indent 'break;')
    <GenCloseBrackets e.Indent>;
}
