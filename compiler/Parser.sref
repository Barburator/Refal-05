//FROM LibraryEx
$EXTERN Fetch, Seq, Map, SaveFile, Sort, Inc, Dec;

//FROM Lexer
$EXTERN LexFolding, TkOpenBracket, TkCloseBracket,
  TkOpenCall, TkCloseCall, TkEOF, TkDirective, TkName, TkSemicolon,
  EEnum, Enum, Extern, Entry, TkComma, TkOpenBlock, TkCloseBlock,
  TkVariable, TkReplace, TkChar, TkNumber, TkRedefinition,
  TkOpen, TkClose;

//FROM Error
$EXTERN EL-Create, EL-Destroy, EL-NoErrors, EL-HasErrors, EL-AddUnexpected,
  EL-AddErrorAt, EL-WarningAt;

//FROM SymTable
$EXTERN ST-Create, ST-CheckUnresolved, ST-Destroy, ST-AllFunctions,
  ST-AddDefined, ST-AddDeclared, ST-AddFunctionCall, ST-GetAnyName;

//FROM Library
$EXTERN Success, Fails, StrFromInt;

//FROM Generator
$EXTERN GenCommonHeaders, GN-Entry, GenExtern, GN-Local, GenForward,
  GenCommonTailer, GenEEnum, GenEnum, GenFnStart, GenSentence, GenFnEnd-Success,
  GenFnEnd, GN-CreateClosure;

//FROM Context
$EXTERN Cntx-Create, Cntx-Destroy, Cntx-PushScope, Cntx-PopScope,
  Cntx-ResetAfterSentence, Cntx-AddNewVariable, Cntx-AddVariable, InvalidMode,
  AlreadyBounded, Cntx-CheckVariable, ExistVariable, VariableNotFound;

//FROM Algorithm
$EXTERN MakeAlgorithm, Brackets, CallBrackets;


/**
  <CompileFile (e.SrcName) e.OutputName>
    == Success e.OutputName
    == Fails
*/
$ENTRY CompileFile {
  (e.SrcName) e.OutputName =
    <Fetch
      <LexFolding e.SrcName>
      <Seq
        (Map PrepareBracket)
        {
          e.LexFolding =
            <ParseElements
              <EL-Create e.SrcName> <ST-Create> (/* generated */)
              e.LexFolding
            >;
        }
        {
          t.ErrorList t.SymTable e.Lines =
            <ST-CheckUnresolved t.ErrorList t.SymTable> e.Lines;
        }
        {
          t.ErrorList t.SymTable e.Lines =
            <ST-Destroy t.SymTable>
            <Fetch
              <EL-Destroy t.ErrorList>
              {
                EL-NoErrors =
                  <SaveFile (e.OutputName) e.Lines>
                  Success e.OutputName;

                EL-HasErrors =
                  Fails;
              }
            >;
        }
      >
    >;
}

PrepareBracket {
  (TkOpenBracket t.SrcPos) = (TkOpen t.SrcPos TkOpenBracket);
  (TkCloseBracket t.SrcPos) = (TkClose t.SrcPos TkCloseBracket);

  (TkOpenCall t.SrcPos) = (TkOpen t.SrcPos TkOpenCall);
  (TkCloseCall t.SrcPos) = (TkClose t.SrcPos TkCloseCall);

  t.OtherToken = t.OtherToken;
}

/*
  Трансляция осуществляется обычным методом рекурсивного спуска.

  TranslationUnit = Element* .

  Element =
    '$ENUM' NameList |
    '$EENUM' NameList |
    '$EXTERN' NameList |
    '$ENTRY' Function |
    Function .

  NameList = Name ',' NameList | Name ';' .

  Function = Name Block .

  Block = '{' Sentence* '}' .

  Sentence = Pattern '=' Result ';' .

  Pattern = PatternTerm* .

  PatternTerm = CommonTerm |
    '(' Patter ')' | '[' Pattern ']' | RedefinitionVariable .

  RedefinitionVariable = Variable '^' .

  CommonTerm = Char | Number | Name | Variable .

  Result = ResultTerm* .

  ResultTerm = CommonTerm |
    '(' Result ')' | '[' Result ']' | '<' Result '>' | Block .

  Стратегия обработки ошибок. Выделяем только одну функцию, проглатывающую
  неожиданные лексемы. Остальные функции при обнаружении неожиданной лексемы
  должны её оставить в лексической свёртке перейдя в одно из состояний уровнем
  выше. Данная стратегия обработки ошибок может нарушаться, но при этом должно
  выполняться условие, что TkEOF передаётся в ParseElements.
*/

/*
  TranslationUnit = Element* .
*/

/*
  Element =
    '$ENUM' NameList |
    '$EENUM' NameList |
    '$EXTERN' NameList |
    '$ENTRY' Function |
    Function .
*/

ParseElements {
  t.ErrorList t.SymTable (e.Generated) (TkEOF t.SrcPos) =
    t.ErrorList t.SymTable
    <GenCommonHeaders>
    <Map
      {
        (GN-Entry e.Name) = <GenExtern e.Name>;
        (GN-Local e.Name) = <GenForward e.Name>;
      }
      <Sort <ST-AllFunctions t.SymTable>>
    >
    ()
    e.Generated
    <GenCommonTailer>;

  t.ErrorList t.SymTable (e.Generated)
  (TkDirective t.SrcPos s.Directive) e.Tail =
    <Fetch
      <ParseElement-SwDirective
        t.ErrorList t.SymTable s.Directive e.Tail
      >
      {
        (e.NewGenerated) t.ErrorList^ t.SymTable^ e.Tail^ =
          <ParseElements
            t.ErrorList t.SymTable (e.Generated e.NewGenerated) e.Tail
          >;
      }
    >;

  t.ErrorList t.SymTable (e.Generated) (TkName t.SrcPos e.Name) e.Tail =
    <Fetch
      <ParseFunction
        GN-Local (e.Name)
        <ST-AddDefined t.ErrorList t.SymTable GN-Local t.SrcPos e.Name>
        e.Tail
      >
      {
        (e.NewGenerated) t.ErrorList^ t.SymTable^ e.Tail^ =
          <ParseElements
            t.ErrorList t.SymTable (e.Generated e.NewGenerated) e.Tail
          >;
      }
    >;

  t.ErrorList t.SymTable (e.Generated) (TkSemicolon t.SrcPos) e.Tail =
    <ParseElements t.ErrorList t.SymTable (e.Generated) e.Tail>;

  t.ErrorList t.SymTable (e.Generated) t.Unexpected e.Tail =
    <ParseElements
      <EL-AddUnexpected t.ErrorList t.Unexpected 'directive or name'>
      t.SymTable (e.Generated) e.Tail
    >;
}

DontGen {
  e.Name = /* пусто */;
}

GenFunctionsFromDirective {
  EEnum   = GenEEnum   ST-AddDefined  GN-Entry;
  Enum    = GenEnum    ST-AddDefined  GN-Local;
  Extern  = DontGen    AddExtern      GN-Entry;
}

AddExtern {
  t.ErrorList t.SymTable s.ScopeClass t.SrcPos e.Name =
    t.ErrorList <ST-AddDeclared t.SymTable e.Name>;
}

ParseElement-SwDirective {
  t.ErrorList t.SymTable Entry (TkName t.SrcPos e.Name) e.Tail =
    <ParseFunction
      GN-Entry (e.Name)
      <ST-AddDefined t.ErrorList t.SymTable GN-Entry t.SrcPos e.Name>
      e.Tail
    >;

  t.ErrorList t.SymTable Entry t.Unexpected e.Tail =
    (/* ничего не генерируем */)
    <EL-AddUnexpected t.ErrorList t.Unexpected 'function name'>
    t.SymTable t.Unexpected e.Tail;

  t.ErrorList t.SymTable s.Directive e.Tail =
    <ParseNameList
      (/* generated */)
      t.ErrorList t.SymTable
      <GenFunctionsFromDirective s.Directive>
      e.Tail
    >;
}

/*
  NameList = Name ',' NameList | Name ';' .
*/

ParseNameList {
  (e.Generated)
  t.ErrorList t.SymTable s.GenFunc s.TableChangeFunc s.ScopeClass
  (TkName t.SrcPos e.Name) e.Tail =
    <ParseNameList-Tail
      (e.Generated <s.GenFunc e.Name>)
      <s.TableChangeFunc t.ErrorList t.SymTable s.ScopeClass t.SrcPos e.Name>
      s.GenFunc s.TableChangeFunc s.ScopeClass
      e.Tail
    >;

  (e.Generated)
  t.ErrorList t.SymTable s.GenFunc s.TableChangeFunc s.ScopeClass
  t.Unexpected e.Tail =
    (e.Generated)
    <EL-AddUnexpected t.ErrorList t.Unexpected 'function name'>
    t.SymTable t.Unexpected e.Tail;
}

ParseNameList-Tail {
  (e.Generated)
  t.ErrorList t.SymTable s.GenFunc s.TableChangeFunc s.ScopeClass
  (TkComma t.SrcPos) e.Tail =
    <ParseNameList
      (e.Generated)
      t.ErrorList t.SymTable s.GenFunc s.TableChangeFunc s.ScopeClass e.Tail
    >;

  (e.Generated)
  t.ErrorList t.SymTable s.GenFunc s.TableChangeFunc s.ScopeClass
  (TkSemicolon t.SrcPos) e.Tail =
    (e.Generated) t.ErrorList t.SymTable e.Tail;

  (e.Generated)
  t.ErrorList t.SymTable s.GenFunc s.TableChangeFunc s.ScopeClass
  t.Unexpected e.Tail =
    (e.Generated)
    <EL-AddUnexpected t.ErrorList t.Unexpected 'comma or semicolon'>
    t.SymTable t.Unexpected e.Tail;
}

/*
  Function = Name '{' Sentence* '}'
*/

CreateLambdaName {
  e.Name s.Number =
    'lambda_' e.Name '_' <StrFromInt s.Number>;
}

$ENUM LambdaName;

ParseFunction {
  s.ScopeClass (e.Name) t.ErrorList t.SymTable
  (TkOpenBlock t.SrcPos) e.Tail =
    <Fetch
      <ParseBlock
        (0) t.ErrorList t.SymTable <Cntx-Create> e.Tail
      >
      {
        (s.NextNumber e.FunctionBodies t.MainBody)
        t.ErrorList^ t.SymTable^ (t.Context) e.Tail^ =
          <Cntx-Destroy t.Context>
          (
            <Map
              {
                (s.Number e.Sentences) =
                  <GenFunctionBody
                    GN-Local (e.Name) (<CreateLambdaName e.Name s.Number>)
                    e.Sentences
                  >;
              }
              e.FunctionBodies
            >
            <Fetch
              t.MainBody
              {
                (s.Number e.Sentences) =
                  <GenFunctionBody
                    s.ScopeClass (e.Name) (e.Name) e.Sentences
                  >;
              }
            >
          )
          t.ErrorList t.SymTable e.Tail;
      }
    >;

  s.ScopeClass (e.Name) t.ErrorList t.SymTable
  t.Unexpected e.Tail =
    (/* ничего не сгенерировали */)
    <EL-AddUnexpected t.ErrorList t.Unexpected 'open brace'>
    t.SymTable t.Unexpected e.Tail;
}

ResolveLambdaName {
  (e.MainName) e.Result =
    <Map
      {
        (TkName LambdaName s.Number) =
          (TkName <CreateLambdaName e.MainName s.Number>);

        (Brackets e.SubResult) =
          (Brackets <ResolveLambdaName (e.MainName) e.SubResult>);

        (CallBrackets e.SubResult) =
          (CallBrackets <ResolveLambdaName (e.MainName) e.SubResult>);

        t.OtherTerm = t.OtherTerm;
      }
      e.Result
    >;
}

GenFunctionBody {
  // Закомментированный код содержит вариант кодогенерации,
  // при котором если последнее предложение имеет вид
  // e.X = ...;, в конце не генерится возврат
  // return RecognitionImpossible;

  //s.ScopeClass (e.MainName) (e.Name)
  //e.Sentences (((TkVariable 'e' e.Index)) (e.Result)) =
  //  <GenFnStart s.ScopeClass e.Name>
  //  <Map
  //    <PrepareAndGenSentence e.MainName>
  //    e.Sentences
  //    (((TkVariable 'e' e.Index)) (e.Result))
  //  >
  //  <GenFnEnd-Success>;

  s.ScopeClass (e.MainName) (e.Name) e.Sentences =
    <GenFnStart s.ScopeClass e.Name>
    <Fetch
      e.Sentences
      (Map {
        ((e.Pattern) (e.Result)) =
          <GenSentence
            <MakeAlgorithm
              (e.Pattern) (<ResolveLambdaName (e.MainName) e.Result>)
            >
          >;
      })
    >
    <GenFnEnd>;
}

/*
  <ParseBlock
    (e.FunctionBodies) t.ErrorList t.SymTable t.Context e.Tokens
  >
    == (e.FunctionBodies)
    t.ErrorList t.SymTable (t.Context e.FreeVars) e.Tokens

  e.FunctionBodies ::= s.NextNumber t.FunctionBody*
  t.FunctionBody ::= (s.Number ((e.Pattern) (e.Result))*)

  Открывающая скобка должна отсутствовать во входном потоке.
*/
ParseBlock {
  (e.Functions)
  t.ErrorList t.SymTable t.Context e.Tokens =
    <DoParseBlock
      (e.Functions) t.ErrorList t.SymTable
      <Cntx-PushScope t.Context>
      (/* sentences */) e.Tokens
    >;
}

DoParseBlock {
  (s.Number e.Functions)
  t.ErrorList t.SymTable t.Context
  (e.Sentences)
  (TkCloseBlock t.SrcPos) e.Tail =
    <Fetch
      <Cntx-PopScope t.Context>
      {
        t.Context^ e.FreeContext =
          (
            <Inc s.Number> e.Functions
            (
              s.Number
              <Map
                (AddContextToSentence e.FreeContext)
                e.Sentences
              >
            )
          )
          t.ErrorList t.SymTable (t.Context e.FreeContext);
      }
    >
    e.Tail;

  (s.Number e.Functions)
  t.ErrorList t.SymTable t.Context
  (e.Sentences) (TkEOF t.SrcPos) e.Tail =
    (
      <Inc s.Number>
      e.Functions (s.Number e.Sentences)
    )
    <EL-AddErrorAt
      t.ErrorList t.SrcPos 'Unexpected EOF, expected "}"'
    >
    t.SymTable
    ( <Cntx-PopScope t.Context> )
    (TkEOF t.SrcPos) e.Tail;

  (e.Functions)
  t.ErrorList t.SymTable t.Context
  (e.Sentences) e.Tokens =
    <DoParseBlock
      <ParseSentence
        (e.Functions) t.ErrorList t.SymTable t.Context
        (e.Sentences) e.Tokens
      >
    >;
}

AddContextToSentence {
  e.Context ((e.Pattern) (e.Result)) =
    (
      (
        <CreateContext e.Context>
        e.Pattern
      )
      (e.Result)
    );
}

CreateContext {
  e.Context =
    <Map
      {
        ('e' e.Index) = (Brackets (TkVariable 'e' e.Index));
        (s.Mode e.Index) = (TkVariable s.Mode e.Index);
      }
      e.Context
    >;
}

ParseSentence {
  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) e.Tokens =
    <Fetch
      <ParsePattern
        t.ErrorList t.SymTable t.Context ( /* мультискобки */ )
        ( /* просканировано */ ) e.Tokens
      >
      <Seq
        {
          t.ErrorList^ t.SymTable^ t.Context^
          (e.Pattern) (TkReplace t.SrcPos) e.Tokens^ =
            t.ErrorList t.SymTable t.Context
            (e.Pattern) e.Tokens;

          t.ErrorList^ t.SymTable^ t.Context^
          (e.Pattern) (s.NextResultTerm t.SrcPos e.Info) e.Tokens^ =
            <EL-AddErrorAt
              t.ErrorList t.SrcPos 'Incorrect pattern termination'
            >
            t.SymTable t.Context
            (e.Pattern) e.Tokens;
        }
        {
          t.ErrorList^ t.SymTable^ t.Context^
          (e.Pattern) e.Tokens^ =
            (e.Pattern)
            <ParseResult
              (e.Functions) t.ErrorList t.SymTable t.Context
              ( /* мультискобки */ ) ( /* просканировано */ ) e.Tokens
            >;
        }
        {
          (e.Pattern)
          (e.Functions^) t.ErrorList^ t.SymTable^ t.Context^
          (e.Result) (TkSemicolon t.SrcPos) e.Tokens^ =
            (e.Functions) t.ErrorList t.SymTable
            <Cntx-ResetAfterSentence t.Context>
            (e.Sentences ((e.Pattern) (e.Result))) e.Tokens;

          (e.Pattern)
          (e.Functions^) t.ErrorList^ t.SymTable^ t.Context^
          (e.Result) (TkCloseBlock t.SrcPos) e.Tokens^ =
            (e.Functions)
            <EL-AddErrorAt t.ErrorList t.SrcPos 'Missed semicolon'>
            t.SymTable
            <Cntx-ResetAfterSentence t.Context>
            (e.Sentences ((e.Pattern) (e.Result)))
            (TkCloseBlock t.SrcPos) e.Tokens;

          (e.Pattern)
          (e.Functions^) t.ErrorList^ t.SymTable^ t.Context^
          (e.Result) t.Unexpected e.Tokens^ =
            (e.Functions)
            <EL-AddUnexpected t.ErrorList t.Unexpected 'semicolon'>
            t.SymTable
            <Cntx-ResetAfterSentence t.Context>
            (e.Sentences ((e.Pattern) (e.Result)))
            t.Unexpected e.Tokens;
        }
      >
    >;
}

ParsePattern {
  // Обработка литералов атомов

  t.ErrorList t.SymTable t.Context (e.MultiBrackets)
  (e.Scanned) (TkChar t.SrcPos s.Char) e.Tail =
    <ParsePattern
      t.ErrorList t.SymTable t.Context (e.MultiBrackets)
      (e.Scanned (TkChar s.Char)) e.Tail
    >;

  t.ErrorList t.SymTable t.Context (e.MultiBrackets)
  (e.Scanned) (TkNumber t.SrcPos s.Number) e.Tail =
    <ParsePattern
      t.ErrorList t.SymTable t.Context (e.MultiBrackets)
      (e.Scanned (TkNumber s.Number)) e.Tail
    >;

  t.ErrorList t.SymTable t.Context (e.MultiBrackets)
  (e.Scanned) (TkName t.SrcPos e.Name) e.Tail =
    <ParsePattern
      t.ErrorList <ST-AddFunctionCall t.SymTable t.SrcPos e.Name>
      t.Context (e.MultiBrackets)
      (e.Scanned (TkName e.Name)) e.Tail
    >;

  // Переменные

  t.ErrorList t.SymTable t.Context (e.MultiBracket)
  (e.Scanned)
  (TkVariable t.SrcPosVar s.Mode e.Index)
  (TkRedefinition t.SrcPosRedef)
  e.Tail =
    <EL-WarningAt t.ErrorList t.SrcPosRedef 'redefinition'>
    <Fetch
      <CheckAddVariable
        t.ErrorList t.Context
        Cntx-AddNewVariable t.SrcPosVar s.Mode e.Index
      >
      {
        t.ErrorList^ t.Context^ s.Mode^ s.Depth =
          <ParsePattern
            t.ErrorList t.SymTable t.Context (e.MultiBracket)
            (e.Scanned (TkVariable s.Mode e.Index s.Depth)) e.Tail
          >;
      }
    >;

  t.ErrorList t.SymTable t.Context (e.MultiBracket)
  (e.Scanned) (TkVariable t.SrcPos s.Mode e.Index) e.Tail =
    <Fetch
      <CheckAddVariable
        t.ErrorList t.Context
        Cntx-AddVariable t.SrcPos s.Mode e.Index
      >
      {
        t.ErrorList^ t.Context^ s.Mode^ s.Depth =
          <ParsePattern
            t.ErrorList t.SymTable t.Context (e.MultiBracket)
            (e.Scanned (TkVariable s.Mode e.Index s.Depth)) e.Tail
          >;
      }
    >;

  t.ErrorList t.SymTable t.Context (e.MultiBracket)
  (e.Scanned) (TkRedefinition t.SrcPos) e.Tail =
    <ParsePattern
      <EL-AddErrorAt t.ErrorList t.SrcPos 'Naked redefinition sign'>
      t.SymTable t.Context (e.MultiBracket)
      (e.Scanned) e.Tail
    >;

  /*
    Скобки.

    Стратегия обработки ошибок: если мы встретили "не ту" закрывающую
    скобку, считаем, что "та" была пропущена.
    Если имеем непарную открывающую скобку, считаем,
    что соответствующая скобка была пропущена в конце выражения;
    если имеем непарную закрывающую скобку, считаем её лишней.
  */

  t.ErrorList t.SymTable t.Context (e.MultiBracket)
  (e.Scanned) (TkOpen t.SrcPos TkOpenBracket) e.Tail =
    <ParsePattern
      t.ErrorList t.SymTable t.Context
      (
        e.MultiBracket
        (Brackets t.SrcPos TkCloseBracket e.Scanned)
      )
      () e.Tail
    >;

  t.ErrorList t.SymTable t.Context (e.MultiBracket)
  (e.Scanned)
  (TkOpen t.SrcPos TkOpenCall) e.Tail =
    <ParsePattern
      <EL-AddErrorAt
        t.ErrorList t.SrcPos 'Unexpected call bracket in pattern expression'
      >
      t.SymTable t.Context
      (
        e.MultiBracket
        (Brackets t.SrcPos TkCloseCall e.Scanned)
      )
      () e.Tail
    >;

  t.ErrorList t.SymTable t.Context
  (
    e.MultiBracket
    (s.BracketsSign t.InnerSrcPos s.CloseBracket e.Scanned)
  )
  (e.InnerScanned) (TkClose t.CloseSrcPos s.CloseBracket) e.Tail =
    <ParsePattern
      t.ErrorList t.SymTable t.Context (e.MultiBracket)
      (e.Scanned (s.BracketsSign e.InnerScanned))
      e.Tail
    >;

  t.ErrorList t.SymTable t.Context
  (
    e.MultiBracket
    (s.BracketsSign t.InnerSrcPos s.CloseBracket e.Scanned)
  )
  (e.InnerScanned) (TkClose t.SrcPos s.OtherCloseBracket) e.Tail =
    <ParsePattern
      <EL-AddErrorAt
        t.ErrorList t.InnerSrcPos
        'Unbalanced bracket "' <StrFromBracket s.BracketsSign> '"'
      >
      t.SymTable t.Context (e.MultiBracket)
      (e.Scanned (s.BracketsSign e.InnerScanned))
      (TkClose t.SrcPos s.OtherCloseBracket) e.Tail
    >;

  t.ErrorList t.SymTable t.Context ()
  (e.Scanned) (TkClose t.SrcPos s.CloseBracket) e.Tail =
    <ParsePattern
      <EL-AddErrorAt
        t.ErrorList t.SrcPos
        'Unbalanced bracket "' <StrFromBracket s.CloseBracket> '"'
      >
      t.SymTable t.Context ()
      (e.Scanned) e.Tail
    >;

  t.ErrorList t.SymTable t.Context
  (
    e.MultiBracket
    (s.BracketsSign t.InnerSrcPos s.CloseBracket e.Scanned)
  )
  (e.InnerScanned) e.Tail =
    <ParsePattern
      <EL-AddErrorAt
        t.ErrorList t.InnerSrcPos
        'Unbalanced bracket "' <StrFromBracket s.BracketsSign> '"'
      >
      t.SymTable t.Context (e.MultiBracket)
      (e.Scanned (s.BracketsSign e.InnerScanned))
      e.Tail
    >;

  t.ErrorList t.SymTable t.Context ()
  (e.Pattern) e.Tail =
    t.ErrorList t.SymTable t.Context
    (e.Pattern)  e.Tail;
}

InvalidModeVariableError {
  t.ErrorList t.SrcPos s.OldMode s.NewMode e.Index =
    <EL-AddErrorAt
      t.ErrorList t.SrcPos
      'Variables ' s.OldMode '.' e.Index ' and '
      s.NewMode '.' e.Index ' has different modes'
    >;
}

CheckAddVariable {
  t.ErrorList t.Context
  s.FnContextModifier t.SrcPos s.Mode e.Index =
    <Fetch
      <s.FnContextModifier t.Context s.Mode e.Index>
      {
        t.Context^ Success s.Depth =
          t.ErrorList t.Context s.Mode s.Depth;

        t.Context^ InvalidMode s.Depth s.OldMode =
          <InvalidModeVariableError
            t.ErrorList t.SrcPos s.OldMode s.Mode e.Index
          >
          t.Context s.OldMode s.Depth;

        t.Context^ AlreadyBounded s.Depth =
          <EL-AddErrorAt
            t.ErrorList t.SrcPos
            'Variable hide operator^ must be applied to first occurence of '
            'variable ' s.Mode '.' e.Index
          >
          t.Context s.Depth s.Mode;
      }
    >;
}

StrFromBracket {
  TkOpenBracket = '('; TkCloseBracket = ')';
  TkOpenCall = '<'; TkCloseCall = '>';
  Brackets = '(';
  CallBrackets = '<';
}

/*
  <ParseResult
    (e.Functions) t.ErrorList t.SymTable t.Context
    (e.MultiBracket) (e.Scanned) e.Tail
  >
*/
ParseResult {
  // Обработка литералов атомов

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.MultiBracket) (e.Scanned) (TkChar t.SrcPos s.Char) e.Tail =
    <ParseResult
      (e.Functions) t.ErrorList t.SymTable t.Context
      (e.MultiBracket) (e.Scanned (TkChar s.Char)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.MultiBracket) (e.Scanned) (TkNumber t.SrcPos s.Number) e.Tail =
    <ParseResult
      (e.Functions) t.ErrorList t.SymTable t.Context
      (e.MultiBracket) (e.Scanned (TkNumber s.Number)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.MultiBracket) (e.Scanned) (TkName t.SrcPos e.Name) e.Tail =
    <ParseResult
      (e.Functions)
      t.ErrorList <ST-AddFunctionCall t.SymTable t.SrcPos e.Name>
      t.Context
      (e.MultiBracket) (e.Scanned (TkName e.Name)) e.Tail
    >;

  // Переменные

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.MultiBracket) (e.Scanned) (TkVariable t.SrcPos s.Mode e.Index) e.Tail =
    <Fetch
      <CheckUseVariable t.ErrorList t.Context t.SrcPos s.Mode e.Index>
      {
        t.ErrorList^ t.Context^ s.Mode^ s.Depth =
          <ParseResult
            (e.Functions)
            t.ErrorList t.SymTable t.Context
            (e.MultiBracket)
            (e.Scanned (TkVariable s.Mode e.Index s.Depth)) e.Tail
          >;

        t.ErrorList^ t.Context^ =
          <ParseResult
            (e.Functions)
            t.ErrorList t.SymTable t.Context
            (e.MultiBracket) (e.Scanned) e.Tail
          >;
      }
    >;

  /*
    Скобки.

    Стратегия обработки ошибок: если мы встретили "не ту"
    закрывающую скобку, считаем, что "та" была пропущена.
    Если имеем непарную открывающую скобку, считаем,
    что соответствующая скобка была пропущена в конце выражения;
    если имеем непарную закрывающую скобку, считаем её лишней.
  */

  // Структурные и угловые скобки обрабатываются одинаково
  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.MultiBracket) (e.Scanned) (TkOpen t.SrcPos s.OpenBracket) e.Tail =
    <ParseResult
      (e.Functions) t.ErrorList t.SymTable t.Context
      (
        e.MultiBracket
        (
          <Fetch
            s.OpenBracket
            {
              TkOpenBracket = Brackets;
              TkOpenCall = CallBrackets;
            }
          >
          t.SrcPos
          <Fetch
            s.OpenBracket
            {
              TkOpenBracket = TkCloseBracket;
              TkOpenCall = TkCloseCall;
            }
          >
          e.Scanned
        )
      )
      () e.Tail
    >;

  // Правильная закрывающая скобка
  (e.Functions) t.ErrorList t.SymTable t.Context
  (
    e.MultiBracket
    (s.BracketsSign t.OpenSrcPos s.CloseBracket e.Scanned)
  )
  (e.InnerScanned) (TkClose t.SrcPos s.CloseBracket) e.Tail =
    <ParseResult
      (e.Functions) t.ErrorList t.SymTable t.Context
      (e.MultiBracket) (e.Scanned (s.BracketsSign e.InnerScanned))
      e.Tail
    >;

  // Лямбда-функция
  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.MultiBracket) (e.Scanned) (TkOpenBlock t.SrcPos) e.Tail =
    <EL-WarningAt t.ErrorList t.SrcPos 'nested function'>
    <ParseResult-Block
      (e.MultiBracket) (e.Scanned)
      <ParseBlock
        (e.Functions) t.ErrorList t.SymTable t.Context
        e.Tail
      >
    >;

  // Неправильная закрывающая скобка или закрывающая скобка отсутствует
  (e.Functions) t.ErrorList t.SymTable t.Context
  (
    e.MultiBracket
    (s.BracketsSign t.OpenSrcPos s.CloseBracket e.Scanned)
  )
  (e.InnerScanned) e.Tail =
    <ParseResult
      (e.Functions)
      <EL-AddErrorAt
        t.ErrorList t.OpenSrcPos
        'Unbalanced bracket "' <StrFromBracket s.BracketsSign> '"'
      >
      t.SymTable t.Context
      (e.MultiBracket) (e.Scanned (s.BracketsSign e.InnerScanned))
      e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  () (e.Scanned) (TkClose t.SrcPos s.CloseBracket) e.Tail =
    <ParseResult
      (e.Functions)
      <EL-AddErrorAt
        t.ErrorList t.SrcPos
        'Unbalanced bracket "' <StrFromBracket s.CloseBracket> '"'
      >
      t.SymTable t.Context
      () (e.Scanned) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  () (e.Result) e.Tail =
    (e.Functions) t.ErrorList t.SymTable t.Context
    (e.Result) e.Tail;
}

CheckUseVariable {
  t.ErrorList t.Context t.SrcPos s.Mode e.Index =
    <Fetch
      <Cntx-CheckVariable t.Context s.Mode e.Index>
      {
        t.Context^ ExistVariable s.Depth =
          t.ErrorList t.Context s.Mode s.Depth;

        t.Context^ InvalidMode s.Depth s.OldMode =
          <InvalidModeVariableError
            t.ErrorList t.SrcPos s.OldMode s.Mode e.Index
          >
          t.Context s.OldMode s.Depth;

        t.Context^ VariableNotFound =
          <EL-AddErrorAt
            t.ErrorList t.SrcPos 'Variable ' s.Mode '.' e.Index ' not found'
          >
          t.Context;
      }
    >;
}

ParseResult-Block {
  (e.MultiBracket) (e.Scanned)
  (s.NextNum e.Functions) t.ErrorList t.SymTable
  ( t.Context /* свободные переменные в функции отсутствуют */ )
  e.Tail =
    <ParseResult
      (s.NextNum e.Functions) t.ErrorList t.SymTable t.Context
      (e.MultiBracket)
      (e.Scanned (TkName LambdaName <Dec s.NextNum>))
      e.Tail
    >;

  (e.MultiBracket) (e.Scanned)
  (s.NextNum e.Functions) t.ErrorList t.SymTable
  ( t.Context e.FreeContext )
  e.Tail =
    <Fetch
      <Dec s.NextNum> (<CreateContext e.FreeContext>)
      {
        s.FunctionNumber (e.RealContext) =
          <ParseResult
            (s.NextNum e.Functions) t.ErrorList t.SymTable t.Context
            (e.MultiBracket)
            (
              e.Scanned
              (CallBrackets
                (TkName GN-CreateClosure)
                (TkName LambdaName s.FunctionNumber)
                e.RealContext
              )
            )
            e.Tail
          >;
      }
    >;
}
