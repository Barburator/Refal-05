//FROM LibraryEx
$EXTERN Fetch, Inc, Map, Seq, Dec;

//FROM Lexer
$EXTERN TkChar, TkNumber, TkName, TkVariable, TkCloseBracket, TkCloseCall;

//FROM Library
$EXTERN StrFromInt;

//FROM Escape
$EXTERN EscapeChar;


$ENTRY MakeAlgorithm {
  (e.Pattern) (e.Result) =
    <GeneralizeResult
      <GenPattern e.Pattern>
      <GenResult e.Result>
    >;
}

/*
  e.Vars ::= (s.Count s.Mode e.Index)*
*/

//==============================================================================
// Генерация образца
//==============================================================================

// Направление распознавания
$EENUM AlgLeft, AlgRight;

$EENUM Brackets, CallBrackets;

/*
Команды распознавания
  Литералы, формат (Cmd*** s.Direction s.BracketNum e.Literal)
  Скобки, формат (CmdBrackets s.Direction s.BracketNum s.InnerNum)
  Пустые скобки, формат (CmdEmpty AlgLeft s.BracketNum),
    направление добавлено для единнобразия, генератором не используется
  Переменные:
    повторные, формат
      (CmdRepeated s.Direction s.BracketNum s.Usings s.Mode e.Index)
    новые s и t, формат (CmdVar s.Direction s.BracketNum s.Mode e.Index)
    открытые e:
      первоначальный формат (CmdOpenedE AlgLeft s.BracketNum 'e' e.Index)
      после обработки:
        (CmdOpenedE-Start AlgLeft s.BracketNum 'e' e.Index)
        (CmdOpenedE-End AlgLeft s.BracketNum 'e' e.Index)
    закрытые e, формат
      (CmdClosedE AlgLeft s.BracketNum 'e' e.Index (e.BracketsForSave))
  Команды сохранения скобок
    (CmdSave s.OldNumber e.NewNumber)
  Комментарий, вносимый в исходный код (CmdComment e.Text)
*/
$EENUM
  CmdChar, CmdNumber, CmdName,
  CmdBrackets, CmdEmpty,
  CmdRepeated, CmdVar, CmdClosedE,
  CmdOpenedE-Start, CmdOpenedE-End,
  CmdComment, CmdSave;

$ENUM CmdOpenedE;

GenPattern {
  e.Pattern =
    <GenPattern-Aux
      (e.Pattern)
      <DoGenPattern
        1 (0 e.Pattern) (/* vars */) (/* commands */)
      >
    >;
}

GenPattern-Aux {
  (e.Pattern) s.NumRanges (e.Vars) e.Commands =
    (e.Vars)
    (
      (CmdComment <TextFromPattern e.Pattern>)
      <SaveBrackets s.NumRanges e.Commands>
    );
}

DoGenPattern {
  // Распознавание литералов (символьных, целочисленных, имён)
  s.NumRanges e.Ranges-B (s.Num (TkChar s.Char) e.Range) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdChar AlgLeft s.Num s.Char))
    >;

  s.NumRanges e.Ranges-B (s.Num (TkNumber s.Number) e.Range) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdNumber AlgLeft s.Num s.Number))
    >;

  s.NumRanges e.Ranges-B (s.Num (TkName e.Name) e.Range) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdName AlgLeft s.Num e.Name))
    >;

  s.NumRanges e.Ranges-B (s.Num e.Range (TkChar s.Char)) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdChar AlgRight s.Num s.Char))
    >;

  s.NumRanges e.Ranges-B (s.Num e.Range (TkNumber s.Number)) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdNumber AlgRight s.Num s.Number))
    >;

  s.NumRanges e.Ranges-B (s.Num e.Range (TkName e.Name)) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdName AlgRight s.Num e.Name))
    >;

  // Распознавание скобок
  s.NumRanges e.Ranges-B
  (s.Num (Brackets e.SubRange) e.Range)
  e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.NumRanges>
      e.Ranges-B (s.NumRanges e.SubRange) (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdBrackets AlgLeft s.Num s.NumRanges))
    >;

  s.NumRanges e.Ranges-B
  (s.Num e.Range (Brackets e.SubRange))
  e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.NumRanges>
      e.Ranges-B (s.Num e.Range) (s.NumRanges e.SubRange) e.Ranges-E
      (e.Vars) (e.Commands (CmdBrackets AlgRight s.Num s.NumRanges))
    >;

  // Пустой диапазон
  s.NumRanges e.Ranges-B (s.Num /* пусто */) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B e.Ranges-E
      (e.Vars) (e.Commands (CmdEmpty AlgLeft s.Num))
    >;

  // Распознавание переменных
  s.NumRanges e.Ranges-B (s.Num (TkVariable s.Mode e.Index) e.Range) e.Ranges-E
  (e.Vars-B (s.Count s.Mode e.Index) e.Vars-E) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars-B (<Inc s.Count> s.Mode e.Index) e.Vars-E)
      (e.Commands (CmdRepeated AlgLeft s.Num <Inc s.Count> s.Mode e.Index))
    >;

  s.NumRanges e.Ranges-B (s.Num e.Range (TkVariable s.Mode e.Index)) e.Ranges-E
  (e.Vars-B (s.Count s.Mode e.Index) e.Vars-E) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars-B (<Inc s.Count> s.Mode e.Index) e.Vars-E)
      (e.Commands (CmdRepeated AlgRight s.Num <Inc s.Count> s.Mode e.Index))
    >;

  // Диапазон с закрытой переменной
  s.NumRanges e.Ranges-B (s.Num (TkVariable 'e' e.Index)) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B e.Ranges-E
      (e.Vars (1 'e' e.Index))
      (e.Commands (CmdClosedE AlgLeft s.Num 'e' e.Index))
    >;

  s.NumRanges e.Ranges-B (s.Num (TkVariable 's' e.Index) e.Range) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars (1 's' e.Index)) (e.Commands (CmdVar AlgLeft s.Num 's' e.Index))
    >;

  s.NumRanges e.Ranges-B (s.Num (TkVariable 't' e.Index) e.Range) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars (1 't' e.Index)) (e.Commands (CmdVar AlgLeft s.Num 't' e.Index))
    >;

  s.NumRanges e.Ranges-B (s.Num e.Range (TkVariable 's' e.Index)) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars (1 's' e.Index)) (e.Commands (CmdVar AlgRight s.Num 's' e.Index))
    >;

  s.NumRanges e.Ranges-B (s.Num e.Range (TkVariable 't' e.Index)) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars (1 't' e.Index)) (e.Commands (CmdVar AlgRight s.Num 't' e.Index))
    >;

  s.NumRanges e.Ranges-B (s.Num (TkVariable 'e' e.Index) e.Range) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars (1 'e' e.Index))
      (e.Commands (CmdOpenedE AlgLeft s.Num 'e' e.Index))
    >;

  // Завершение разбора.
  s.NumRanges /* пусто */ (e.Vars) (e.Commands) =
    s.NumRanges (e.Vars) e.Commands;
}

SaveBrackets {
  s.LastBracket e.Commands = <DoSaveBrackets s.LastBracket () e.Commands>;
}

DoSaveBrackets {
  s.LastBracket (e.Scanned)
  e.Commands-B (CmdOpenedE AlgLeft s.Num 'e' e.Index) e.Commands-E =
    <DoSaveBrackets-BeforeMakeSavers
      s.LastBracket
      e.Scanned e.Commands-B (CmdOpenedE AlgLeft s.Num 'e' e.Index)
      (e.Commands-E)
    >;

  s.LastBracket (e.Scanned) e.Commands = e.Scanned e.Commands;
}

DoSaveBrackets-BeforeMakeSavers {
  s.LastBracket e.CommandsBeforeEMatch (e.Commands-E) =
    <DoSaveBrackets-MakeSavers
      s.LastBracket
      ( <ExtractBrackets e.CommandsBeforeEMatch> )
      ( e.CommandsBeforeEMatch )
      e.Commands-E
    >;
}

DoSaveBrackets-MakeSavers {
  s.LastBracket
  (e.BoundedBrackets-B s.Num e.BoundedBrackets-E)
  (e.Scanned)
  e.Commands-B (s.Command s.Direction s.Num e.Args) e.Commands-E =
    <DoSaveBrackets-MakeSavers
      <Inc s.LastBracket>
      (e.BoundedBrackets-B e.BoundedBrackets-E)
      (e.Scanned (CmdSave s.Num s.LastBracket))
      <Map
        (DoSaveBrackets-MakeSavers-PatchNum s.Num s.LastBracket)
        e.Commands-B (s.Command s.Direction s.Num e.Args) e.Commands-E
      >
    >;

  s.LastBracket (e.UnusedBoundedBrackets) (e.Scanned) e.Commands =
    <DoSaveBrackets s.LastBracket (e.Scanned) e.Commands>;
}

DoSaveBrackets-MakeSavers-PatchNum {
  /*
    Все команды распознавания содержат номер скобок третьим термом,
    общий формат (s.Command s.Direction s.BracketNum e.Info)
  */
  s.Num s.LastBracket (s.Command s.Direction s.Num e.Info) =
    (s.Command s.Direction s.LastBracket e.Info);

  s.Num s.LastBracket (s.Command s.Direction s.OtherNum e.Info) =
    (s.Command s.Direction s.OtherNum e.Info);
}

ExtractBrackets {
  e.Commands = <Brackets-Set <Map ExtractBrackets-Command e.Commands>>;
}

ExtractBrackets-Command {
  (CmdBrackets s.Direction s.BracketNum s.InnerNum) =
    s.BracketNum s.InnerNum;

  (s.Command s.Direction s.BracketNum e.Info) = s.BracketNum;
}

Brackets-Set {
  e.Unique s.Repeated e.Middle s.Repeated e.Rest =
    e.Unique <Brackets-Set s.Repeated e.Middle e.Rest>;

  e.Unique = e.Unique;
}

TextFromPattern {
  (Brackets e.Inner) e.Tail =
    ' (' <TextFromPattern e.Inner> ' )' <TextFromPattern e.Tail>;

  (TkChar s.Char) e.Tail =
    ' ' '' <TextFromPattern-Char (TkChar s.Char) e.Tail>;

  (TkNumber s.Number) e.Tail =
    ' ' <StrFromInt s.Number> <TextFromPattern e.Tail>;

  (TkName e.Name) e.Tail =
    ' & ' e.Name <TextFromPattern e.Tail>;

  (TkVariable s.Mode e.Index s.Depth) e.Tail =
    ' ' s.Mode '.' e.Index '#' <StrFromInt s.Depth> <TextFromPattern e.Tail>;

  = ;
}

TextFromPattern-Char {
  (TkChar s.Char) e.Tail =
    <EscapeChar s.Char> <TextFromPattern-Char e.Tail>;

  = '';

  e.Other = <TextFromPattern e.Other>;
}

//==============================================================================
// Генерация результата
//==============================================================================

GenResult {
  e.Result =
    <DoGenResult
      (/* vars */)
      (/* alloc commands */) (/* other commands */)
      0 // счётчик новых элементов
      e.Result
    >;
}

// Основные команды работы с образцом
//  (CmdAllocateElem s.Number s.ElType e.Info)
//  (CmdLinkBrackets s.Left s.Right)
//  (CmdPushStack s.Number)
//  (CmdInsertElem s.Number)
//  (CmdInsertVar s.Usings s.Mode e.Index)
$EENUM
  CmdAllocateElem,
  CmdLinkBrackets,
  CmdPushStack,
  CmdInsertElem,
  CmdInsertVar;

// Спецификаторы команд (элементы)
$EENUM
  ElChar, ElName, ElNumber,
  ElOpenBracket, ElCloseBracket,
  ElOpenCall, ElCloseCall;

/*
  Порядок выполнения команд.
  1. Все выделения памяти (в порядке перечисления)
  2. Связывание крулых и угловых скобок и
  построение результата (в обратном порядке)
*/

DoGenResult {
  // Создаём литералы
  (e.Vars) (e.AllocCommands) (e.Commands) s.Counter (TkChar s.Value) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElChar s.Value))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands) s.Counter (TkName e.Name) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElName e.Name))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkNumber s.Number) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElNumber s.Number))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  /*
    Обработка открывающих скобок всех трёх типов осуществляется похоже.
  */
  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (Brackets e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElOpenBracket))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.InBrackets (TkCloseBracket s.Counter) e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (CallBrackets e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElOpenCall))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.InBrackets (TkCloseCall s.Counter) e.Result
    >;

  /*
    Закрывающие скобки надо обрабатывать особым образом.
    Круглые скобки и АТД -- слинковать, угловые -- добавить в стек.
  */
  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkCloseBracket s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElCloseBracket))
      (
        (CmdLinkBrackets s.OpenCounter s.Counter)
        (CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkCloseCall s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElCloseCall))
      (
        (CmdPushStack s.Counter)
        (CmdPushStack s.OpenCounter)
        (CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  // Обработка переменных
  (e.Vars-B (s.Usings s.Mode e.Index) e.Vars-E) (e.AllocCommands) (e.Commands)
  s.Counter (TkVariable s.Mode e.Index) e.Result =
    <DoGenResult
      (e.Vars-B (<Inc s.Usings> s.Mode e.Index) e.Vars-E)
      (e.AllocCommands)
      ((CmdInsertVar <Inc s.Usings> s.Mode e.Index) e.Commands)
      s.Counter e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkVariable s.Mode e.Index) e.Result =
    <DoGenResult
      (e.Vars (1 s.Mode e.Index))
      (e.AllocCommands)
      ((CmdInsertVar 1 s.Mode e.Index) e.Commands)
      s.Counter e.Result
    >;

  // Завершение просмотра
  (e.Vars) (e.AllocCommands) (e.Commands) s.Counter =
    (e.Vars) (e.AllocCommands) (e.Commands);
}

//==============================================================================
// Обобщение информации -- уничтожение ненужных переменных,
// копирование повторных.
//==============================================================================

$EENUM CmdEmptyResult, CmdReturnResult;

GeneralizeResult {
  (e.PatternVars) (e.PatternCommands)
  (e.ResultVars) (e.ResultAllocCommands) (e.ResultCommands) =
    <Fetch
      (<ReplicateVars e.PatternVars>)
      (<ReplicateVars e.ResultVars>)
      (<Map RepeatedEVariables e.PatternCommands>)
      <Map ClosedEVariables e.PatternCommands>
      <Seq
        MakeVarsSets
        (FilterCommonVarsAndPatternCommands (e.PatternCommands))
        (ComposeSentenceCommands (e.ResultAllocCommands e.ResultCommands))
      >
    >;
}

ReplicateVar {
  (1 s.Mode e.Index) = (1 s.Mode e.Index);

  (s.Using s.Mode e.Index) =
    <ReplicateVar (<Dec s.Using> s.Mode e.Index)>
    (s.Using s.Mode e.Index);
}

ReplicateVars {
  e.Vars = <Map ReplicateVar e.Vars>;
}

VarSetUnion {
  ( e.Set1-B t.Common e.Set1-E ) ( e.Set2-B t.Common e.Set2-E ) =
    t.Common
    <VarSetUnion (e.Set1-B e.Set1-E) (e.Set2-B e.Set2-E)>;

  ( e.Set1 ) ( e.Set2 ) = e.Set1 e.Set2;
}

VarSetDifference {
  ( e.Set1-B t.Common e.Set1-E ) ( e.Set2-B t.Common e.Set2-E ) =
    e.Set1-B <VarSetDifference (e.Set1-E) ( e.Set2-B e.Set2-E )>;

  ( e.Set1 ) ( e.Set2 ) = e.Set1;
}

ClosedEVariables {
  (CmdClosedE AlgLeft s.Num 'e' e.Index) = (1 'e' e.Index);

  t.Other = /* игнорируем */;
}

RepeatedEVariables {
  (CmdRepeated s.Direction s.Num s.Count 'e' e.Index) = (1 'e' e.Index);

  t.Other = /* игнорируем */;
}

FilterUnusedCmdClosedE {
  e.Unuseds-B (1 'e' e.Index s.Depth) e.Unuseds-E
  (CmdClosedE AlgLeft s.Num 'e' e.Index s.Depth) =
    (CmdComment ' Unused closed variable e.' e.Index '#' <StrFromInt s.Depth>);

  e.Unuseds t.OtherCommand = t.OtherCommand;
}

$EENUM CmdDeclareEVar, CmdDeclareVar;

MakeDeclaration {
  ( s.Usings 'e' e.Index ) = (CmdDeclareEVar s.Usings 'e' e.Index);

  ( s.Usings s.Mode e.Index ) =
    (CmdDeclareVar s.Usings s.Mode e.Index);
}

$EENUM CmdCopyEVar, CmdCopyVar;

MakeCopyVar {
  ( s.Usings 'e' e.Index ) = (CmdCopyEVar s.Usings 'e' e.Index);

  ( s.Usings s.Mode e.Index ) =
    (CmdCopyVar s.Usings s.Mode e.Index);
}

MakeVarsSets {
  (e.PatternVars) (e.ResultVars) (e.RepeatedEs) e.ClosedEs =
    (<VarSetUnion (e.PatternVars) (e.ResultVars)>)
    (<VarSetDifference (e.ResultVars) (e.PatternVars)>)
    <VarSetDifference (e.ClosedEs) (e.RepeatedEs e.ResultVars)>;
}

FilterCommonVarsAndPatternCommands {
  (e.PatternCommands)
  (e.CommonVars) (e.CopiedVars) e.UnusedClosedEs =
    (<VarSetDifference (e.CommonVars) (e.UnusedClosedEs)>)
    (e.CopiedVars)
    <Map (FilterUnusedCmdClosedE e.UnusedClosedEs) e.PatternCommands>;
}

ComposeSentenceCommands {
  (e.ResultCommands) (e.CommonVars) (e.CopiedVars) e.PatternCommands =
    <GenerateResult-OpenELoops
      <Map MakeDeclaration e.CommonVars>
      e.PatternCommands
      (CmdEmptyResult)
      <Map MakeCopyVar e.CopiedVars>
      e.ResultCommands
      (CmdReturnResult)
    >;
}

GenerateResult-OpenELoops {
  e.Commands-B (CmdOpenedE AlgLeft s.BracketNum 'e' e.Index) e.Commands-E =
    e.Commands-B
    (CmdOpenedE-Start AlgLeft s.BracketNum 'e' e.Index)
    <GenerateResult-OpenELoops e.Commands-E>
    (CmdOpenedE-End AlgLeft s.BracketNum 'e' e.Index);

  e.Commands = e.Commands;
}
