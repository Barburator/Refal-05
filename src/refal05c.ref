*$FROM LibraryEx
$EXTERN ArgList, LoadFile, Map, DelAccumulator, MapReduce, Inc;

*$FROM ParseCmdLine
$EXTERN ParseCommandLine, CmdLineError, CompileCommand, NoCompile;

*$FROM Library
$EXTERN Prout, Success, Fails, System, Exit, Symb;

*$FROM FindFile
$EXTERN FindFiles, NotFound, Output, Source;

*$FROM Parser
$EXTERN CompileFile;


$ENTRY Go {
  = <Main <ArgList>>;
}

Main {
  (e.ProgName) ('@' e.Config) =
    <Main (e.ProgName) <LoadFile e.Config>>;

  (e.ProgName) e.Arguments =
    <FindFiles-Compilers
      <ParseCommandLine e.Arguments>
    >;
}

FindFiles-Compilers {
  (CmdLineError e.Message) =
    <Prout 'COMMAND LINE ERROR: ' e.Message>;

  t.Compiler (e.Folders) e.Files =
    <FindFiles-Compilers-SwFound
      t.Compiler <FindFiles (e.Folders) e.Files>
    >;
}

FindFiles-Compilers-SwFound {
  t.Compiler e.Files-B (NotFound e.FileName) e.Files-E =
    <Map PrintNotFound (NotFound e.FileName) e.Files-E>;

  t.Compiler e.FoundFiles =
    <CheckCompilationResult
      t.Compiler
      <Map
        ProcessEachSource
        <RenameFiles t.Compiler e.FoundFiles>
      >
    >;
}

PrintNotFound {
  (NotFound e.FileName) =
    <Prout 'COMMAND LINE ERROR: file ' e.FileName ' not found'>;

  (Output e.FileName) = ;

  (Source (e.Source) e.Output) = ;
}

ProcessEachSource {
  (Output e.OutputName) =
    <Prout '+Linking ' e.OutputName> (e.OutputName);

  (Source (e.Source) e.OutputName) =
    <Prout '*Compiling ' e.Source ':'>
    <ProcessEachSource-SwSuccess
      <CompileFile (e.Source) e.OutputName>
    >;
}

ProcessEachSource-SwSuccess {
  Success e.OutputName = (e.OutputName);

  Fails = Fails;
}

CheckCompilationResult {
  t.Compiler e.Outputs-B Fails e.Outputs-E =
    <Prout '*** COMPILATION FAILED ***'>;

  t.Compiler e.Outputs =
    <Link t.Compiler e.Outputs>
    <Prout '*** Compilation successed ***'>;
}

Link {
  (CompileCommand e.CommandLine) e.Files =
    <System e.CommandLine <Map QuoteFile e.Files>>;

  (NoCompile) e.Files = /* ничего не делаем */;
}

QuoteFile {
  (e.FileName) = ' "' e.FileName '"';
}

RenameFiles {
  (NoCompile) e.Files = e.Files;

  (CompileCommand e.CommandLine) e.Files
    = <ScanCollisions <Map GetFileName e.Files>>;
}

GetFileName {
  (Output e.FileName) =
    (
      <GetFileName-Aux e.FileName> 0 (Output e.FileName)
    );

  (Source (e.Source) e.Output) =
    (
      <GetFileName-Aux e.Output> 0
      (Source (e.Source) e.Output)
    );
}

GetFileName-Aux {
  e.FileName '.cpp' = <DoGetFileName e.FileName>;
}

DoGetFileName {
  e.FileName '/' = ;
  e.FileName '\\' = ;
  e.FileName s.Last =
    <DoGetFileName e.FileName>
    <Lower s.Last>;
  = ;
}

Lower {
  'A' = 'a'; 'B' = 'b'; 'C' = 'c'; 'D' = 'd'; 'E' = 'e'; 'F' = 'f'; 'G' = 'g';
  'H' = 'h'; 'I' = 'i'; 'J' = 'j'; 'K' = 'k'; 'L' = 'l'; 'M' = 'm'; 'N' = 'n';
  'O' = 'o'; 'P' = 'p'; 'Q' = 'q'; 'R' = 'r'; 'S' = 's'; 'T' = 't'; 'U' = 'u';
  'V' = 'v'; 'W' = 'w'; 'X' = 'x'; 'Y' = 'y'; 'Z' = 'z';

  s.Other = s.Other;
}

ScanCollisions {
  e.Files-B (e.FileName 0 (Output e.Output1)) e.Files-M
  (e.FileName 0 (Output e.Output2)) e.Files-E =
    <Prout
      'COMMAND LINE ERROR: output files ' e.Output1 ' and '
      e.Output2 ' has some filename ' e.FileName
    >
    <Exit 1>;

  e.Files-B (e.FileName 0 t.Location) e.Files-M
  (e.FileName 0 (Output e.Output)) e.Files-E =
    <ScanCollisions
      e.Files-B (e.FileName 1 t.Location) e.Files-M
      (e.FileName 0 (Output e.Output))
      <Renumerate (e.FileName) e.Files-E>
    >;

  e.Files-B (e.FileName 0 (Output e.Output)) e.Files-M
  (e.FileName 0 t.Location) e.Files-E =
    <ScanCollisions
      e.Files-B (e.FileName 0 (Output e.Output)) e.Files-M
      (e.FileName 1 t.Location)
      <Renumerate (e.FileName) e.Files-E>
    >;

  e.Files-B (e.FileName 0 t.Location1) e.Files-M
  (e.FileName 0 t.Location2) e.Files-E =
    <ScanCollisions
      e.Files-B (e.FileName 0 t.Location1)
      e.Files-M (e.FileName 1 t.Location2)
      <Renumerate (e.FileName) e.Files-E>
    >;

  e.Files = <Map RestoreName e.Files>;
}

Renumerate {
  (e.FileName) e.Files =
    <DelAccumulator
      <MapReduce (Renumerate-Each e.FileName) 2 e.Files>
    >;
}

Renumerate-Each {
  e.FileName s.NextNumber (e.FileName 0 (Source (e.Source) e.Output)) =
    <Inc s.NextNumber>
    (e.FileName s.NextNumber (Source (e.Source) e.Output));

  e.FileName s.NextNumber t.NextFile =
    s.NextNumber t.NextFile;
}

RestoreName {
  (e.FileName s.Number (Output e.OutputName)) =
    (Output e.OutputName);

  (e.FileName 0 (Source (e.Source) e.Output)) =
    (Source (e.Source) e.Output);

  (e.FileName s.Number (Source (e.Source) e.OutName '.cpp')) =
    (Source (e.Source) e.OutName '@' <Symb s.Number> '.cpp');
}
