/**
  e.Tree ::= t.TreeItem*
  t.TreeItem ::=
      (Extern e.Name)
    | (Function s.Scope (e.Name) e.Body)
    | (Native e.Native)

  e.Name ::= s.CHAR+
*/
*$EENUM Extern, Function, Native

/**
  s.Scope ::= Entry | Local
*/
*$EENUM Entry, Local

/**
  e.Body ::= Sentences t.Sentence* | Native e.Native
  e.Native ::= (e.SourceName s.Line) (s.CHAR*)*
  s.Line ::= s.NUMBER
  e.SourceName ::= s.CHAR+
*/
*$EENUM Sentences

/**
  t.Sentence ::= ((e.Pattern) (e.Result))
  e.Pattern, e.Result ::= e.Expression
  e.Expression ::= t.Term*
  t.Term ::=
      (Symbol Char s.CHAR)
    | (Symbol Number s.NUMBER)
    | (Symbol Name e.Name)
    | (Variable s.Mode e.Index)
    | (Brackets e.Expression)
    | (CallBrackets e.Expression)
  s.Mode ::= 's' | 't' | 'e'
  e.Index ::= s.CHAR+
*/
*$EENUM Symbol, Char, Number, Name, Variable, Brackets, CallBrackets


/**
  <TextFromExpr e.Expression> == s.CHAR*
*/
$ENTRY TextFromExpr {
  /* пусто */ = /* пусто */;

  t.Term = <TextFromTerm t.Term>;

  (Symbol Char s.Char) e.Tail =
    ' \'' <TextFromExpr-Char (Symbol Char s.Char) e.Tail>;

  t.Term e.Expr = <TextFromTerm t.Term> ' ' <TextFromExpr e.Expr>;
}

TextFromExpr-Char {
  (Symbol Char s.Char) e.Tail =
    <EscapeChar s.Char> <TextFromExpr-Char e.Tail>;

  e.Other = '\' ' <TextFromExpr e.Other>;
}

TextFromTerm {
  (Brackets e.Inner) = '(' <TextFromExpr e.Inner> ')';
  (CallBrackets e.Inner) = '<' <TextFromExpr e.Inner> '>';

  (Symbol Char s.Char) = '\'' <EscapeChar s.Char> '\'';
  (Symbol Number s.Number) = <Symb s.Number>;
  (Symbol Name e.Name) = e.Name;

  (Variable s.Mode e.Index) = s.Mode '.' e.Index;
}


$ENTRY EscapeChar {
  '\n' = '\\n';
  '\t' = '\\t';
  '\r' = '\\r';
  '\'' = '\\\'';
  '\"' = '\\\"';
  '\\' = '\\\\';

  s.Other = <EscapeChar-Aux s.Other <Ord s.Other>>;
}

EscapeChar-Aux {
  s.Other s.Code =
    <EscapeChar-SwCompare
      s.Other <Compare 31 s.Code> <Compare s.Code 128> s.Code
    >;
}

EscapeChar-SwCompare {
  s.Other '-' '-' s.Code = s.Other;

  s.Other s.Compare1 s.Compare2 s.Code =
    '\\x' <Hex <Div s.Code 16>> <Hex <Mod s.Code 16>>;
}

Hex {
  0 = '0'; 1 = '1'; 2 = '2'; 3 = '3'; 4 = '4';
  5 = '5'; 6 = '6'; 7 = '7'; 8 = '8'; 9 = '9';

  10 = 'A'; 11 = 'B'; 12 = 'C'; 13 = 'D'; 14 = 'E'; 15 = 'F';
}
