*$FROM Refal5-Lexer
$EXTERN Scan, ScanString-FromPos;

*$FROM LibraryEx
$EXTERN MapAccum, Map, Reduce;
*$EXTERN Success, Fails

*$FROM Refal5-Tokens
*$EXTERN TkCompound, TkError, TkEOF, TkComma, TkName

*$FROM Refal5-Parser
$EXTERN Parse, TokName;

*$FROM Refal5-Transformer
$EXTERN Transform;
*$EXTERN NO-POS

*$FROM Refal5-AST
*$EXTERN Function, Extern, SpecialComment, RETURN, Symbol, Word, Number, Char
*$EXTERN Variable, Brackets, Call, Local, Entry

*$FROM Libarary
*$EXTERN True, False


/**
  <R05-Parse-File e.SourceFile>
    == Success e.Tree
    == Fails e.Errors

  e.Errors ::= ((s.Row s.Col) e.Message)*
*/
$ENTRY R05-Parse-File {
  e.SourceFile = <Parse-CheckTokens <Scan e.SourceFile>>;
}

Parse-CheckTokens {
  e.Tokens
    = <Parse-CheckTokens-Aux
        <MapAccum r05-parser_AddCompoundErrors (/* errors */) e.Tokens>
      >;
}

$ENTRY r05-parser_AddCompoundErrors {
  (e.Errors) (TkCompound t.SrcPos e.Text)
    = (e.Errors (t.SrcPos 'Refal-05 don\'t support compounds in qoutes'));

  (e.Errors) (TkError t.SrcPos e.Message) = (e.Errors (t.SrcPos e.Message));

  (e.Errors) t.OtherToken = (e.Errors) t.OtherToken;
}

Parse-CheckTokens-Aux {
  (e.LexerErrors) e.Tokens
    , <Parse e.Tokens>
    : {
        Success e.AST
          = <R05-Parse-Aux
              <SemanticCheck <PrepareR05AST <EL-Create e.LexerErrors> e.AST>>
            >;

        Fails e.ParserErrors = Fails <SortErrors e.LexerErrors e.ParserErrors>;
      };
}

R05-Parse-Aux {
  t.ErrorList e.Tree =
    <R05-Parse-SwErrors (<EL-Destroy t.ErrorList>) e.Tree>;
}

R05-Parse-SwErrors {
  (/* no errors */) e.Tree = Success e.Tree;

  (e.Errors) e.Tree = Fails <SortErrors e.Errors>;
}

SortErrors {
  e.Errors = <DoSortErrors (/* sorted */) e.Errors>;
}

DoSortErrors {
  (e.Sorted) /* unsorted */ = e.Sorted;

  (e.Sorted) t.Next e.Unsorted =
    <DoSortErrors
      (<SortErrors-Insert e.Sorted t.Next>)
      e.Unsorted
    >;
}

SortErrors-Insert {
  /* пусто */ t.Next = t.Next;

  e.Sorted t.Great t.Next =
    <SortErrors-Insert-Compare
      e.Sorted t.Great t.Next <CompareError t.Great t.Next>
    >;
}

SortErrors-Insert-Compare {
  e.Sorted t.Great t.Next '+' = <SortErrors-Insert e.Sorted t.Next> t.Great;
  e.Sorted t.Great t.Next s.Other = e.Sorted t.Great t.Next;
}

CompareError {
  ((s.Row s.Col1 e.File1) e.Message1) ((s.Row s.Col2 e.File2) e.Message2) =
    <Compare s.Col1 s.Col2>;

  ((s.Row1 s.Col1 e.File1) e.Message1) ((s.Row2 s.Col2 e.File2) e.Message2) =
    <Compare s.Row1 s.Row2>;
}


PrepareR05AST {
  t.ErrorList e.AST
    = <MapAccum r05-parser_PrepareUnit t.ErrorList <Transform e.AST>>;
}

$ENTRY r05-parser_PrepareUnit {
  t.ErrorList (Function t.SrcPos (e.Name) s.Scope e.Sentences)
    = t.ErrorList
      (Function
        t.SrcPos s.Scope (e.Name)
        <Map r05-parser_PrepareSentence e.Sentences>
      );

  t.ErrorList (Extern e.Names)
    = t.ErrorList <Map r05-parser_PrepareExterns e.Names>;

  t.ErrorList (SpecialComment t.SrcPos e.Text)
    = <PrepareSpecialComment t.ErrorList t.SrcPos e.Text>;
}

$ENTRY r05-parser_PrepareSentence {
  ((e.Pattern) RETURN (e.Result)) =
    ((<PrepareExpression e.Pattern>) (<PrepareExpression e.Result>))
}

PrepareExpression {
  e.Expression = <Map r05-parser_PrepareTerm e.Expression>;
}

$ENTRY r05-parser_PrepareTerm {
  (Symbol Word t.SrcPos e.Name) = (Symbol Word t.SrcPos <Normalize e.Name>);
  (Symbol Number s.Number) = (Symbol Number s.Number);
  (Symbol Char s.Char) = (Symbol Char s.Char);

  (Variable t.SrcPos s.Type e.Index) = (Variable s.Type e.Index);
  (Brackets e.Expression) = (Brackets <PrepareExpression e.Expression>);
  (Call t.SrcPos (e.Name) e.Expression)
    = (Call
        (Symbol Word t.SrcPos <Normalize e.Name>)
        <PrepareExpression e.Expression>
      );
}

$ENTRY r05-parser_PrepareExterns {
  (t.SrcPos e.Name) = (Function t.SrcPos Extern (e.Name) /* пусто */);
}

PrepareSpecialComment {
  t.ErrorList t.Pos '*$' e.KeyWord s.Space e.Rest
    , <IsKeyWord e.KeyWord> : s.Scope
    , <IsSpace s.Space> : True
    = <ParseSpecialComment
        s.Scope
        <ScanString-FromPos t.Pos <Spaces '*$' e.KeyWord> e.Rest>
        t.ErrorList
      >;

* пропускаем любые другие специальные комментарии
  t.ErrorList t.Pos e.OtherComment = t.ErrorList;
}

IsKeyWord {
  'ENUM' = Local;
  'EENUM' = Entry;
  'EXTRN' = Extern;
  'EXTERN' = Extern;
  'EXTERNAL' = Extern;

  e.Other = /* пусто */;
}

IsSpace { ' ' = True; '\t' = True; s.Other = False }

Spaces {
  s.Char e.String = ' ' <Spaces e.String>;
  /* пусто */ = /* пусто */
}

ParseSpecialComment {
  s.Scope e.Tokens t.ErrorList
    , <ParseList (ListKeyWord s.Scope) e.Tokens t.ErrorList>
    : (List s.ScopeClass e.Names) e.UnexpectedTokens (TkEOF t.SrcPos)
      t.ErrorList2
    = <AddUnexpectedTokens t.ErrorList2 e.UnexpectedTokens>
      <Map (parser_MakeListFunction s.ScopeClass) e.Names>;
}

AddUnexpectedTokens {
  t.ErrorList /* пусто */ = t.ErrorList;

  t.ErrorList t.Unexpected e.Tokens
    = <AddUnexpectedTokens
        <EL-AddUnexpected t.ErrorList t.Unexpected 'comma or name'>
        e.Tokens
      >;
}

*$ENUM List

$ENTRY parser_MakeListFunction {
  s.ScopeClass (t.SrcPos e.Name) =
    (Function t.SrcPos s.ScopeClass (e.Name) /* пусто */);
}


*$ENUM ListKeyWord

/*
  List ::= List ',' NAME | ListKeyWord NAME.

  <ParseList e.Stack e.Tokens t.ErrorList>
    == (List s.ScopeClass (t.SrcPos e.Name)*) e.Tokens t.ErrorList
*/
ParseList {
  /* List ::= List ',' NAME */
  (List s.ScopeClass e.Names)
  (TkComma t.CommaSrcPos) (TkName t.NameSrcPos e.Name) e.Tokens t.ErrorList =
    <ParseList
      (List s.ScopeClass e.Names (t.NameSrcPos e.Name)) e.Tokens t.ErrorList
    >;

  (List s.ScopeClass e.Names) (TkName t.SrcPos e.Name) e.Tokens t.ErrorList =
    <ParseList
      (List s.ScopeClass e.Names (t.SrcPos e.Name))
      e.Tokens
      <EL-AddErrorAt t.ErrorList t.SrcPos 'expected comma'>
    >;

  (List s.ScopeClass e.Names) (TkComma t.SrcPos) e.Tokens t.ErrorList =
    <ParseList
      (List s.ScopeClass e.Names) e.Tokens
      <EL-AddErrorAt t.ErrorList t.SrcPos 'missed function name'>
    >;

  (List s.ScopeClass e.Names) e.Tokens t.ErrorList =
    (List s.ScopeClass e.Names) e.Tokens t.ErrorList;

  /* List ::= ListKeyWord NAME */
  (ListKeyWord s.ScopeClass) (TkName t.SrcPos e.Name) e.Tokens t.ErrorList =
    <ParseList (List s.ScopeClass (t.SrcPos e.Name)) e.Tokens t.ErrorList>;

  (ListKeyWord s.ScopeClass) t.Unexpected e.Tokens t.ErrorList =
    (List s.ScopeClass) t.Unexpected e.Tokens
    <EL-AddUnexpected t.ErrorList t.Unexpected 'function name'>;
}


SemanticCheck {
  t.ErrorList e.Tree =
    <FindOneEntry
      t.ErrorList (<ExtractReferences e.Tree>) <LoadBuiltins> e.Tree
    >;
}

ExtractReferences {
  e.Tree = <Map parser_ExtractReferences e.Tree>;
}

$ENTRY parser_ExtractReferences {
  (Function t.SrcPos s.ScopeClass (e.Name) e.Sentences) =
    <ExtractReferences-Sentences e.Sentences>;
}

ExtractReferences-Sentences {
  e.Sentences = <Map parser_ExtractReferences-Sentences e.Sentences>;
}

$ENTRY parser_ExtractReferences-Sentences {
  ((e.Pattern) (e.Result)) =
    <ExtractReferences-Expr e.Pattern>
    <ExtractReferences-Expr e.Result>;
}

ExtractReferences-Expr {
  e.Expr = <Map parser_ExtractReferences-Expr e.Expr>;
}

$ENTRY parser_ExtractReferences-Expr {
  (Symbol Word t.SrcPos e.Name) = (t.SrcPos e.Name);
  (Symbol s.Type e.Value) = /* это не имя функции */;

  (Variable s.Mode e.Index) = /* это не имя функции */;

  (Brackets e.Expr) = <ExtractReferences-Expr e.Expr>;
  (Call e.Expr) = <ExtractReferences-Expr e.Expr>;
}

FindOneEntry {
  t.ErrorList (e.References)
  e.Tree-B (Function t.SrcPos Entry (e.Name) e.Body) e.Tree-E =
    <FindUnusedFunctions
      t.ErrorList (e.References)
      e.Tree-B (Function t.SrcPos Entry (e.Name) e.Body) e.Tree-E
    >;

  t.ErrorList (e.References) e.Tree =
    <FindUnusedFunctions
      <EL-AddErrorAt t.ErrorList (1 1) 'No entry functions in file'>
      (e.References) e.Tree
    >;
}


FindUnusedFunctions {
  t.ErrorList (e.References) e.AST
    = <CheckRepeatedDefinitions
        <FindUnusedFunctions-Aux
          t.ErrorList
          <MapAccum r05-parser_PrepareCrossRefs () e.AST>
        >
        (e.References) e.AST
      >;
}

$ENTRY r05-parser_PrepareCrossRefs {
  (e.Entries) (Function t.SrcPos Entry (e.Name) e.Sentences)
    = (e.Entries (t.SrcPos e.Name))
      ((e.Name) t.SrcPos Entry <ExtractReferences-Sentences e.Sentences>);

  (e.Entries) (Function t.SrcPos s.Scope (e.Name) e.Sentences)
    = (e.Entries)
      ((e.Name) t.SrcPos s.Scope <ExtractReferences-Sentences e.Sentences>);
}

FindUnusedFunctions-Aux {
  t.ErrorList (e.UsedReferences) /* все функции вызваны */ = t.ErrorList;

  t.ErrorList ((t.RefPos e.NextName) e.UsedReferences)
  e.Functions-B ((e.NextName) t.FunctionPos s.Scope e.References) e.Functions-E
    = <FindUnusedFunctions-Aux
        t.ErrorList (e.UsedReferences e.References) e.Functions-B e.Functions-E
      >;


  t.ErrorList ((t.RefPos e.NextName) e.UsedReferences) e.Functions
    = <FindUnusedFunctions-Aux t.ErrorList (e.UsedReferences) e.Functions>;

  t.ErrorList (/* пусто */) e.UnusedFunctions
    = <FindUnusedRoot t.ErrorList (e.UnusedFunctions) e.UnusedFunctions>;
}

FindUnusedRoot {
  t.ErrorList (((e.Root) t.RootPos s.Scope e.RootRefs)) e.AllFunctions
    = <FindUnusedFunctions-Aux
        <AddUnusedMessage t.ErrorList t.RootPos s.Scope e.Root>
        ((t.RootPos e.Root)) e.AllFunctions
      >;

  t.ErrorList
  (((e.NotARoot) t.NotARootPos s.NotARootScope e.Body) e.Unuseds)
  e.Users-B
  ((e.User) t.UserPos s.Scope e.Refs-B (t.RefPos e.NotARoot) e.Refs-E)
  e.Users-E
    = <FindUnusedRoot
        t.ErrorList (e.Unuseds)
        e.Users-B
        ((e.User) t.UserPos s.Scope e.Refs-B (t.RefPos e.NotARoot) e.Refs-E)
        e.Users-E
      >;

  t.ErrorList (((e.Root) t.RootPos s.Scope e.RootRefs) e.Unuseds) e.AllFunctions
    = <FindUnusedFunctions-Aux
        <AddUnusedMessage t.ErrorList t.RootPos s.Scope e.Root>
        ((t.RootPos e.Root)) e.AllFunctions
      >;

  t.ErrorList (/* кончились неиспользуемые функции */) e.AllFunctions
    = t.ErrorList;
}

AddUnusedMessage {
  t.ErrorList t.Pos Local e.Name
     = <EL-AddErrorAt t.ErrorList t.Pos 'Unused local function ' e.Name>;

  t.ErrorList NO-POS Extern e.Name = t.ErrorList;

  t.ErrorList t.Pos Extern e.Name
     = <EL-AddErrorAt t.ErrorList t.Pos 'Unused external declaration ' e.Name>;
}


LoadBuiltins {
  = <Map parser_BuiltinDeclaration <ListOfBuiltin>>;
}

$ENTRY parser_BuiltinDeclaration {
  (s.Number s.Name s.Type)
    , <Explode s.Name>
    : {
        /* пусто */ = /* пропускаем */;
        e.Name '$' = /* пропускаем */;

        e.Name = (Function NO-POS Extern (<Normalize e.Name>) /* пусто */);
      }
}

Normalize {
  '%' = 'Mod';
  '*' = 'Mul';
  '+' = 'Add';
  '-' = 'Sub';
  '/' = 'Div';
  '?' = 'Residue';

  e.Name = e.Name;
}

CheckRepeatedDefinitions {
  t.ErrorList (e.References)
  e.Tree-B (Function t.SrcPos1 s.ScopeClass (e.Name) e.Body) e.Tree-E
  (Function t.SrcPos2 Extern (e.Name)) =
    /* $EXTERN для уже существующей функции */
    <CheckRepeatedDefinitions
      t.ErrorList (e.References)
      e.Tree-B (Function t.SrcPos1 s.ScopeClass (e.Name) e.Body) e.Tree-E
    >;

  t.ErrorList (e.References-B (t.SrcPosRef e.Name) e.References-E)
  e.Tree (Function t.SrcPos Extern (e.Name)) =
    /* $EXTERN используется */
    <CheckRepeatedDefinitions
      t.ErrorList (e.References-B <RemoveReference (e.Name) e.References-E>)
      e.Tree
    >
    (Extern e.Name);

  t.ErrorList (e.References)
  e.Tree (Function t.SrcPos Extern (e.Name)) =
    /* $EXTERN не используется */
    <CheckRepeatedDefinitions t.ErrorList (e.References) e.Tree>;

  t.ErrorList (e.References)
  e.Tree-B (Function t.SrcPos1 Extern (e.Name)) e.Tree-E
  (Function t.SrcPos2 s.ScopeClass (e.Name) e.Body) =
    /* $EXTERN для уже существующей функции */
    <CheckRepeatedDefinitions
      t.ErrorList (e.References)
      e.Tree-B e.Tree-E (Function t.SrcPos2 s.ScopeClass (e.Name) e.Body)
    >;

  t.ErrorList (e.References)
  e.Tree-B (Function t.SrcPos1 s.ScopeClass1 (e.Name) e.Body1) e.Tree-E
  (Function t.SrcPos2 s.ScopeClass2 (e.Name) e.Body2) =
    /* Повторное определение функции */
    <CheckRepeatedDefinitions
      <EL-AddErrorAt
        t.ErrorList t.SrcPos2 'Function ' e.Name ' already defined'
      >
      (e.References)
      e.Tree-B (Function t.SrcPos1 s.ScopeClass1 (e.Name) e.Body1) e.Tree-E
    >;

  t.ErrorList (e.References)
  e.Tree (Function t.SrcPos s.Scope (e.Name) e.Body) =
    <CheckRepeatedDefinitions
      t.ErrorList (<RemoveReference (e.Name) e.References>) e.Tree
    >
    (Function s.Scope (e.Name) e.Body);

  t.ErrorList (e.References) /* пусто */ =
    <Reduce parser_AddUnresolved t.ErrorList e.References>;
}

RemoveReference {
  (e.Name) e.References-B (t.SrcPos e.Name) e.References-E =
    e.References-B <RemoveReference (e.Name) e.References-E>;

  (e.Name) e.References = e.References;
}

$ENTRY parser_AddUnresolved {
  t.ErrorList (t.SrcPos e.Name) =
    <EL-AddErrorAt t.ErrorList t.SrcPos 'Function ' e.Name ' is not defined'>;
}


*$ENUM ErrorList

EL-Create {
  e.Errors = (ErrorList e.Errors);
}

EL-AddErrorAt {
  (ErrorList e.Errors) t.SrcPos e.Message =
    (ErrorList e.Errors (t.SrcPos e.Message));
}

EL-AddUnexpected {
  t.ErrorList (TkError t.SrcPos e.Message) e.Expected =
    <EL-AddErrorAt
      t.ErrorList t.SrcPos e.Message
    >;

  t.ErrorList (s.Unexpected t.SrcPos e.Info) e.Expected =
    <EL-AddErrorAt
      t.ErrorList t.SrcPos
      'Unexpected ' <TokName s.Unexpected> ', expected ' e.Expected
    >;
}

EL-Destroy {
  (ErrorList e.Errors) = e.Errors;
}
