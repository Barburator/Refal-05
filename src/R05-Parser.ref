*$FROM LibraryEx
$EXTERN MapAccum, OneOf, Map, Reduce, Unique;
*$EXTERN Success, Fails

*$FROM R5FW-Parser
$EXTERN ScanString-FromPos, Parse, Scan, TokName;

*$FROM R5FW-Parser-Defs
$EXTERN Builtins;
*$EXTERN SpecialComment, Local, Entry, Extern, TkName, TkComma, TkSemicolon
*$EXTERN TkEOF, Function, Condition, RETURN, CALL-BLOCK, Symbol, Word
*$EXTERN Brackets, Call, TkError

*$FROM Library
*$EXTERN True, False

*$FROM R5FW-Transformer
*$EXTERN NO-POS


/**
  <R05-PrepareAST e.AST>
    == Success e.R05-AST
    == Fails e.Errors

  Function expands specific pseudocomments, checks specific errors
  and transform to basic Refal
*/
$ENTRY R05-PrepareAST {
  e.AST = <CheckAST <ExpandComments e.AST>>;
}

ExpandComments {
  e.AST = <MapAccum r05-parser_ExpandComment <EL-Create> e.AST>;
}

$ENTRY r05-parser_ExpandComment {
  t.ErrorList (SpecialComment t.SrcPos '*$' e.KeyWord s.Space e.Rest)
    , <IsKeyWord e.KeyWord> : s.Scope
    , <IsSpace s.Space> : True
    = <ParseSpecialComment
        s.Scope
        <ScanString-FromPos t.SrcPos <Spaces '*$' e.KeyWord> e.Rest>
        t.ErrorList
      >;

  t.ErrorList t.OtherNode = t.ErrorList t.OtherNode;
}

IsKeyWord {
  'ENUM' = Local;
  'EENUM' = Entry;
  'EXTRN' = Extern;
  'EXTERN' = Extern;
  'EXTERNAL' = Extern;

  e.Other = /* пусто */;
}

IsSpace { ' ' = True; '\t' = True; s.Other = False }

Spaces {
  s.Char e.String = ' ' <Spaces e.String>;
  /* пусто */ = /* пусто */
}

/*
  Для простоты разбора синтаксис ослаблен — запятые и точки с запятой
  игнорируются:

  NameList = (Name | "," | ";")*.
*/
ParseSpecialComment {
  s.Scope e.Tokens t.ErrorList
    = <DoParseSpecialComment s.Scope (/* names */) e.Tokens t.ErrorList>;
}

DoParseSpecialComment {
  s.Scope (e.Names) (TkName t.Pos e.Name) e.Tokens t.ErrorList
    = <DoParseSpecialComment
        s.Scope (e.Names (t.Pos e.Name)) e.Tokens t.ErrorList
      >;

  s.Scope (e.Names) (s.Sep t.Pos) e.Tokens t.ErrorList
    , <OneOf s.Sep TkComma TkSemicolon> : True
    = <DoParseSpecialComment s.Scope (e.Names) e.Tokens t.ErrorList>;

  Extern (e.Names) (TkEOF t.Pos) t.ErrorList = t.ErrorList (Extern e.Names);

  s.Scope (e.Names) (TkEOF t.Pos) t.ErrorList
    = t.ErrorList <Map (parser_MakeListFunction s.Scope) e.Names>;

  s.Scope (e.Names) t.Unexpected e.Tokens t.ErrorList
    = <DoParseSpecialComment
        s.Scope (e.Names) e.Tokens
        <EL-AddUnexpected t.ErrorList t.Unexpected 'comma or name'>
      >;
}

$ENTRY parser_MakeListFunction {
  s.ScopeClass (t.SrcPos e.Name) =
    (Function t.SrcPos (e.Name) s.ScopeClass /* пусто */);
}


CheckAST {
  t.ErrorList e.AST
    = <CheckAST-ExternsArePlained t.ErrorList <PlainExterns e.AST>>;
}

CheckAST-ExternsArePlained {
  t.ErrorList e.AST
    = <CheckAST-RedefinitionsAreFound
        <FindRedefinitions t.ErrorList e.AST>
      >;
}

CheckAST-RedefinitionsAreFound {
  t.ErrorList e.AST
    = <CheckAST-UnusedsAreFound
        <FindUnused t.ErrorList e.AST>
      >;
}

CheckAST-UnusedsAreFound {
  t.ErrorList e.AST
    , <EL-Destroy t.ErrorList>
    : {
        /* нет ошибок */ = Success <CastAST e.AST>;
        e.Errors = Fails e.Errors;
      };
}


PlainExterns {
  e.AST
    = <Map r05-parser_BuiltinExtern <Builtins>>
      <Map r05-parser_PlainExterns e.AST>;
}

$ENTRY r05-parser_BuiltinExtern {
  (e.Builtin) = (Function NO-POS (e.Builtin) Extern /* пусто */);
}

$ENTRY r05-parser_PlainExterns {
  (Extern e.Names) = <Map r05-parser_PlainExterns-Name e.Names>;

  (Function t.Pos (e.Name) s.Scope e.Body)
    = (Function t.Pos (e.Name) s.Scope e.Body);

  (SpecialComment t.Pos e.Text) = (SpecialComment t.Pos e.Text);
}

$ENTRY r05-parser_PlainExterns-Name {
  (t.Pos e.Name) = (Function t.Pos (e.Name) Extern /* пусто */);
}



FindRedefinitions {
  t.ErrorList e.AST
    = <FindRedefinitions-Aux
        <Reduce
          r05-parser_FindRedefinitions-Item
          (t.ErrorList /* items */)
          e.AST
        >
      >;
}

FindRedefinitions-Aux {
  (t.ErrorList e.AST) = t.ErrorList e.AST;
}

$ENTRY r05-parser_FindRedefinitions-Item {
  (
    t.ErrorList
    e.Items-B
    (Function NO-POS (e.Name) Extern /* пусто */)  /* встроенная */
    e.Items-E
  )
  (Function t.NewPos (e.Name) s.NewScope e.NewBody)
    = (
        <AddRedudand t.ErrorList t.NewPos s.NewScope e.Name>
        e.Items-B
        (Function NO-POS (e.Name) Extern /* пусто */)
        e.Items-E
      );

  (
    t.ErrorList
    e.Items-B (Function t.OldPos (e.Name) s.OldScope e.OldBody) e.Items-E
  )
  (Function t.NewPos (e.Name) s.NewScope /* пусто */)
    = (
        <AddRedudand t.ErrorList t.NewPos s.NewScope e.Name>
        e.Items-B (Function t.OldPos (e.Name) s.OldScope e.OldBody) e.Items-E
      );

  (
    t.ErrorList
    e.Items-B (Function t.OldPos (e.Name) s.OldScope /* пусто */) e.Items-E
  )
  (Function t.NewPos (e.Name) s.NewScope e.NewBody)
    = (
        <AddRedudand t.ErrorList t.OldPos s.OldScope e.Name>
        e.Items-B e.Items-E (Function t.NewPos (e.Name) s.NewScope e.NewBody)
      );

  (t.ErrorList e.Items) t.Item = (t.ErrorList e.Items t.Item);
}

AddRedudand {
  t.ErrorList t.SrcPos Extern e.Name
    = <EL-AddErrorAt t.ErrorList t.SrcPos 'Redudand external name ' e.Name>;

  t.ErrorList t.SrcPos s.Scope e.Name
    = <EL-AddErrorAt
        t.ErrorList t.SrcPos
        'Empty function ' e.Name ' redefines other function'
      >;
}


FindUnused {
  t.ErrorList e.AST
    = <FindUnused-Loop
        t.ErrorList
        <MapAccum r05-parser_FindUnused-InitialUsage () e.AST>
      >;
}

$ENTRY r05-parser_FindUnused-InitialUsage {
  (e.Entries) (Function t.Pos (e.Name) Entry e.Body)
    = (e.Entries (EntryCaller e.Name))
      (Function Unused t.Pos (e.Name) Entry e.Body);

  (e.Entries) (Function t.Pos (e.Name) s.Scope e.Body)
    = (e.Entries) (Function Unused t.Pos (e.Name) s.Scope e.Body);

  (e.Entries) (SpecialComment t.Pos e.Comment)
    = (e.Entries) (SpecialComment t.Pos e.Comment);
}

*$ENUM EntryCaller Used Unused

FindUnused-Loop {
  t.ErrorList ((t.Caller e.Name) e.References)
  e.AST-B (Function Unused t.Pos (e.Name) s.Scope e.Body) e.AST-E
    = <FindUnused-Loop
        t.ErrorList
        (e.References <AddCaller t.Pos (e.Name) <ExtractReferences e.Body>>)
        e.AST-B (Function Used t.Pos (e.Name) s.Scope e.Body) e.AST-E
      >;

  t.ErrorList ((t.Caller e.Name) e.References)
  e.AST-B (Function Used t.Pos (e.Name) s.Scope e.Body) e.AST-E
    = <FindUnused-Loop
        t.ErrorList (e.References)
        e.AST-B (Function Used t.Pos (e.Name) s.Scope e.Body) e.AST-E
      >;

  t.ErrorList (((t.CallerPos e.Caller) e.Name) e.References) e.AST
    = <FindUnused-Loop
        <EL-AddErrorAt
          t.ErrorList t.CallerPos
          'Undefined symbol ' e.Name ' in function ' e.Caller
        >
        (e.References) e.AST
      >;

   t.ErrorList (/* кончились ссылки */) e.AST
     = <MapAccum r05-parser_FindUnused-Loop-UnusedErrors t.ErrorList e.AST>;
}

AddCaller {
  t.CallerPos (e.Caller) e.Callees
    = <Map (r05-parser_PlainBags-Reference t.CallerPos (e.Caller)) e.Callees>;
}

$ENTRY r05-parser_FindUnused-Loop-UnusedErrors {
  t.ErrorList (Function Unused t.Pos (e.Name) s.Scope e.Body)
    = <AddUnusedMessage t.ErrorList t.Pos s.Scope e.Name>;

  t.ErrorList t.Other = t.ErrorList t.Other;
}


CastAST {
  e.AST = <CastAST-JoinExterns <Map r05-parser_CastAST-Item e.AST>>;
}

$ENTRY r05-parser_CastAST-Item {
  (Function Used t.Pos (e.Name) Extern /* пусто */) = (Extern (t.Pos e.Name));

  (Function Used t.Pos (e.Name) s.Scope e.Body)
    = (Function t.Pos (e.Name) s.Scope e.Body);

  (SpecialComment t.Pos e.Comment) = (SpecialComment t.Pos e.Comment);
}

CastAST-JoinExterns {
  e.AST-B (Extern e.Externs1) (Extern e.Externs2) e.AST-E
    = e.AST-B <CastAST-JoinExterns (Extern e.Externs1 e.Externs2) e.AST-E>;

  e.AST = e.AST;
}


$ENTRY r05-parser_PlainBags-Reference {
  t.SrcPos (e.FuncName) (e.Reference) = ((t.SrcPos e.FuncName) e.Reference);
}

AddUnusedMessage {
  t.ErrorList NO-POS Extern e.Name = t.ErrorList;  /* встроенная */

  t.ErrorList t.Pos Local e.Name
     = <EL-AddErrorAt t.ErrorList t.Pos 'Unused local function ' e.Name>;

  t.ErrorList t.Pos Extern e.Name
     = <EL-AddErrorAt t.ErrorList t.Pos 'Unused external declaration ' e.Name>;
}


/*
  <ExtractReferences e.Sentences> == (e.Name)*
*/
ExtractReferences {
  e.Sentences = <Unique <Map r05-parser_ExtractReferences-Sentence e.Sentences>>;
}

$ENTRY r05-parser_ExtractReferences-Sentence {
  ((e.Pattern) e.Tail)
    = <ExtractReferences-Expr e.Pattern> <ExtractReferences-Tail e.Tail>;
}

ExtractReferences-Tail {
  (Condition (e.Result) (e.Pattern)) e.Tail
    = <ExtractReferences-Expr e.Result> <ExtractReferences-Expr e.Pattern>
      <ExtractReferences-Tail e.Tail>;

  RETURN (e.Result) = <ExtractReferences-Expr e.Result>;

  CALL-BLOCK (e.Result) e.Sentences
    = <ExtractReferences-Expr e.Result>
      <ExtractReferences e.Sentences>;
}

ExtractReferences-Expr {
  e.Expr = <Map r05-parser_ExtractReferences-Term e.Expr>;
}

$ENTRY r05-parser_ExtractReferences-Term {
  (Symbol Word e.Name) = (e.Name);

  (Brackets e.Expr) = <ExtractReferences-Expr e.Expr>;

  (Call t.SrcPos (e.Name) e.Expr)
    = (<DesugarName e.Name>) <ExtractReferences-Expr e.Expr>;

  t.Other = /* пусто */;
}

DesugarName {
  '%' = 'Mod';
  '*' = 'Mul';
  '+' = 'Add';
  '-' = 'Sub';
  '/' = 'Div';
  '?' = 'Residue';

  e.Name = e.Name;
}

/**
  <R05-Parse-File e.SourceFile>
    == Success e.Tree
    == Fails e.Errors

  e.Errors ::= ((s.Row s.Col) e.Message)*
*/
$ENTRY R05-Parse-File {
  e.SourceFile
    , <Parse <Scan e.SourceFile>>
    : {
        Success e.AST
          , <R05-PrepareAST e.AST>
          : {
            Success e.PreparedAST = Success e.PreparedAST;

            Fails e.SemanticErrors = Fails <SortErrors e.SemanticErrors>;
          };

        Fails e.ParserErrors = Fails <SortErrors e.ParserErrors>;
      };
}

SortErrors {
  e.Errors = <DoSortErrors (/* sorted */) e.Errors>;
}

DoSortErrors {
  (e.Sorted) /* unsorted */ = e.Sorted;

  (e.Sorted) t.Next e.Unsorted =
    <DoSortErrors
      (<SortErrors-Insert e.Sorted t.Next>)
      e.Unsorted
    >;
}

SortErrors-Insert {
  /* пусто */ t.Next = t.Next;

  e.Sorted t.Great t.Next =
    <SortErrors-Insert-Compare
      e.Sorted t.Great t.Next <CompareError t.Great t.Next>
    >;
}

SortErrors-Insert-Compare {
  e.Sorted t.Great t.Next '+' = <SortErrors-Insert e.Sorted t.Next> t.Great;
  e.Sorted t.Great t.Next s.Other = e.Sorted t.Great t.Next;
}

CompareError {
  ((s.Row s.Col1 e.File1) e.Message1) ((s.Row s.Col2 e.File2) e.Message2) =
    <Compare s.Col1 s.Col2>;

  ((s.Row1 s.Col1 e.File1) e.Message1) ((s.Row2 s.Col2 e.File2) e.Message2) =
    <Compare s.Row1 s.Row2>;
}


*$ENUM ErrorList

EL-Create {
  e.Errors = (ErrorList e.Errors);
}

EL-AddErrorAt {
  (ErrorList e.Errors) t.SrcPos e.Message =
    (ErrorList e.Errors (t.SrcPos e.Message));
}

EL-AddUnexpected {
  t.ErrorList (TkError t.SrcPos e.Message) e.Expected =
    <EL-AddErrorAt
      t.ErrorList t.SrcPos e.Message
    >;

  t.ErrorList (s.Unexpected t.SrcPos e.Info) e.Expected =
    <EL-AddErrorAt
      t.ErrorList t.SrcPos
      'Unexpected ' <TokName s.Unexpected> ', expected ' e.Expected
    >;
}

EL-Destroy {
  (ErrorList e.Errors) = e.Errors;
}
