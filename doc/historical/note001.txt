  Лирическое отступление. Это уже не исследование, это уже доработка до стадии
законченного продукта.

  Цель работы. Исправить основные ошибки в компиляторе и сделать продукт более
пригодным к использованию.

  Задачи.
  (1) Сделать компилятор переносимым под g++. Дело в том, что согласно Стандар-
ту C++ объявление функции вида void f(); или extern void f(); не может предва-
рять определение функции с модификатором static. Функции с модификатором static
должны объявляться как static void f();. Данное требование Стандарта не соблю-
дается компиляторами Microsoft Visual C++ и Borland C++ Builder -- они позволя-
ют не использовать модификатор static для объявления static-функций. Однако,
компилятор g++ это требование соблюдает.
  В данной версии Простого Рефала директива $EXTERN компилируется в объявление
extern-функции, хотя часто предваряет описание локальных функций.
  Решение проблемы. Ввводим в язык директиву $FORWARD, которая предназначена
для объявления локальных функций.

  (2) Исправить ошибку со сложными образцами. В случае образцов вида:

  Test {
    e.Begin (e.Inner) e.End (e.Left 'X' e.Inner) = ;
  }

  $ENTRY Go {
    = <Test ('er') ('super') ('super') ('abba' 'X' 'super')>;
  }

при переборе очередного варианта открытой e-переменной e.Begin состояние разбо-
ра внутри скобок справа (e.Left 'X' e.Inner) не откатывается до изначального --
разбор данного образца терпит неудачу.
  Решение проблемы. Более полно сохранять состояния.

  ...


  Результаты.
  (1) Компилятор сделан переносимым: добавлена директива $FORWARD и добавлена
поддержка концов строки вида CrLf (необходимо для компиляции под UNIX исходни-
ков, написанных под Windows).

  (2) Ошибка исправлена.

  ...
